name: 1 Debug Data Structure 
description: Downloads and analyzes data.txt structure with extensive debugging
inputs:
  - name: cdn_url
    type: String
  - name: dataset_name
    type: String
outputs:
  - name: raw_content
    type: String
  - name: debug_info
    type: String
  - name: structure_report
    type: String
implementation:
  container:
    image: python:3.9
    command: [python, -c]
    args:
      - |
        import sys, os, requests, json, urllib.parse
        
        cdn_url = sys.argv[1]
        dataset_name = sys.argv[2]
        raw_content_path = sys.argv[3]
        debug_info_path = sys.argv[4]
        structure_report_path = sys.argv[5]
        
        # Install dependencies
        import subprocess
        subprocess.check_call([sys.executable, "-m", "pip", "install", "requests", "pandas", "numpy"])
        
        decoded_url = urllib.parse.unquote(cdn_url)
        response = requests.get(decoded_url)
        response.raise_for_status()
        raw_content = response.text
        
        with open(raw_content_path, 'w') as f:
            f.write(raw_content)
        
        lines = raw_content.split('\n')
        debug_info = {
            'total_lines': len(lines),
            'file_size_bytes': len(raw_content),
            'dataset_target': dataset_name
        }
        
        structure_report = {'dataset_locations': []}
        for i, line in enumerate(lines):
            if dataset_name in line:
                structure_report['dataset_locations'].append({
                    'line_number': i,
                    'content_preview': line[:200]
                })
        
        with open(debug_info_path, 'w') as f:
            json.dump(debug_info, f)
        with open(structure_report_path, 'w') as f:
            json.dump(structure_report, f)
        
        print('Analysis completed')
      - {inputValue: cdn_url}
      - {inputValue: dataset_name}
      - {outputPath: raw_content}
      - {outputPath: debug_info}
      - {outputPath: structure_report}
