name: 2 Preprocess IMDB Dataset
description: Preprocesses the IMDB dataset and computes class weights.

inputs:
  - name: imdb_raw_data
    type: Dataset

outputs:
  - name: imdb_processed_data
    type: Dataset
  - name: weights_out1
    type: String

implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet datasets torch || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet datasets torch --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse, os, json
        from datasets import load_from_disk, DatasetDict

        parser = argparse.ArgumentParser()
        parser.add_argument('--imdb_raw_data', type=str, required=True)
        parser.add_argument('--imdb_processed_data', type=str, required=True)
        parser.add_argument('--weights_out1', type=str, required=True)
        args = parser.parse_args()

        print(f"[INFO] Loading raw data from {args.imdb_raw_data}")
        dataset = load_from_disk(args.imdb_raw_data)
        dataset = dataset['train'].select(range(1000))  # Example: take first 1000

        print(f"[INFO] Preprocessing dataset...")
        labels = dataset['label']
        neg = sum([1 for l in labels if l == 0])
        pos = sum([1 for l in labels if l == 1])
        total = len(labels)
        class_weights = [total/(2*neg), total/(2*pos)]
        alpha_weights = [pos/total, neg/total]

        weights_dict = {
            'focal_loss_alpha': alpha_weights,
            'class_weights': class_weights
        }

        print(f"[INFO] Saving preprocessed dataset to {args.imdb_processed_data}")
        os.makedirs(os.path.dirname(args.imdb_processed_data), exist_ok=True)
        dataset.save_to_disk(args.imdb_processed_data)

        print(f"[INFO] Saving weights to {args.weights_out1}")
        os.makedirs(os.path.dirname(args.weights_out1), exist_ok=True)
        with open(args.weights_out1, 'w') as f:
            json.dump(weights_dict, f, indent=2)

        print(f"[SUCCESS] Preprocessing complete!")

    args:
      - --imdb_raw_data
      - {inputPath: imdb_raw_data}
      - --imdb_processed_data
      - {outputPath: imdb_processed_data}
      - --weights_out1
      - {outputPath: weights_out1}
