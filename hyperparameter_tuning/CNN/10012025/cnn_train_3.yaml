name: 10 CNN Model Trainer
description: Trains CNN model on preprocessed data
inputs:
  - name: model_path
    type: String
    description: Path to built model file
  - name: processed_data_path
    type: String
    description: Path to preprocessed data file
  - name: model_config
    type: String
    description: Complete model configuration as JSON string
outputs:
  - name: trained_model_path
    type: String
    description: Path to trained model file
  - name: training_history
    type: String
    description: JSON string with training history and metrics
  - name: final_accuracy
    type: String
    description: Final validation accuracy

implementation:
  container:
    image: gurpreetgandhi/nesy-factory:v19
    command:
    - python3
    - -u
    - -c
    - |
      import os
      import sys
      import json
      import torch
      import torch.nn as nn
      import torch.optim as optim
      import pickle
      
      print("CNN MODEL TRAINER STARTED")
      
      import argparse
      parser = argparse.ArgumentParser()
      parser.add_argument('--model_path', type=str, required=True)
      parser.add_argument('--processed_data_path', type=str, required=True)
      parser.add_argument('--model_config', type=str, required=True)
      parser.add_argument('--trained_model_path', type=str, required=True)
      parser.add_argument('--training_history', type=str, required=True)
      parser.add_argument('--final_accuracy', type=str, required=True)
      args = parser.parse_args()
      
      print("INPUT VALUES:")
      print("Model path: " + args.model_path)
      print("Data path: " + args.processed_data_path)
      print("Config length: " + str(len(args.model_config)) + " characters")
      
      # PARSE CONFIG FROM DIRECT JSON STRING
      try:
          model_config = json.loads(args.model_config)
          print("CONFIG PARSED SUCCESSFULLY")
          print("Config keys: " + str(list(model_config.keys())))
      except json.JSONDecodeError as e:
          print("ERROR: Failed to parse config JSON: " + str(e))
          print("Config content that failed: " + args.model_config[:500])
          sys.exit(1)
      
      # PRINT CONFIG DETAILS
      print("CONFIG DETAILS:")
      if 'model' in model_config:
          print("Model config:")
          for key, value in model_config['model'].items():
              print("  " + key + ": " + str(value))
      
      if 'training' in model_config:
          print("Training config:")
          for key, value in model_config['training'].items():
              if isinstance(value, dict):
                  print("  " + key + ":")
                  for subkey, subvalue in value.items():
                      print("    " + subkey + ": " + str(subvalue))
              else:
                  print("  " + key + ": " + str(value))
      
      # EXTRACT TRAINING PARAMETERS
      training_config = model_config.get('training', {})
      model_config_section = model_config.get('model', {})
      
      # Extract from nested optimizer config
      optimizer_config = training_config.get('optimizer', {})
      scheduler_config = training_config.get('scheduler', {})
      criterion_config = training_config.get('criterion', {})
      
      epochs = 10
      learning_rate = optimizer_config.get('learning_rate', 0.001)
      weight_decay = optimizer_config.get('weight_decay', 0.0001)
      batch_size = training_config.get('batch_size', 32)
      patience = 5
      
      print("TRAINING PARAMETERS EXTRACTED:")
      print("  Epochs: " + str(epochs))
      print("  Learning rate: " + str(learning_rate))
      print("  Weight decay: " + str(weight_decay))
      print("  Batch size: " + str(batch_size))
      print("  Patience: " + str(patience))
      
      try:
          print("LOADING MODEL AND DATA")
          
          # Load model - args.model_path is the actual file path
          print("Loading model from: " + args.model_path)
          if not os.path.exists(args.model_path):
              print("ERROR: Model file does not exist: " + args.model_path)
              print("Current directory: " + os.getcwd())
              print("Directory contents:")
              for item in os.listdir('.'):
                  print("  " + item)
              sys.exit(1)
          
          with open(args.model_path, 'rb') as f:
              model = pickle.load(f)
          
          device = model.device
          print("Model loaded successfully")
          print("Model device: " + str(device))
          print("Model type: " + str(type(model)))
          
          # Load data - args.processed_data_path is the actual file path
          print("Loading data from: " + args.processed_data_path)
          if not os.path.exists(args.processed_data_path):
              print("ERROR: Data file does not exist: " + args.processed_data_path)
              sys.exit(1)
          
          with open(args.processed_data_path, 'rb') as f:
              processed_data = pickle.load(f)
          
          print("Data loaded successfully")
          print("Data keys: " + str(list(processed_data.keys())))
          
          # Extract data loaders
          train_loader = processed_data.get('train_loader')
          val_loader = processed_data.get('val_loader')
          data_info = processed_data.get('data_info', {})
          
          if train_loader is None:
              print("ERROR: train_loader is None in processed data")
              sys.exit(1)
              
          print("Training samples: " + str(len(train_loader.dataset)))
          if val_loader:
              print("Validation samples: " + str(len(val_loader.dataset)))
          else:
              print("No validation loader found")
          
          # TRAINING SETUP
          optimizer = optim.AdamW(model.parameters(), lr=learning_rate, weight_decay=weight_decay)
          criterion = nn.CrossEntropyLoss()
          
          print("STARTING TRAINING FOR " + str(epochs) + " EPOCHS")
          training_history = []
          best_val_acc = 0.0
          patience_counter = 0
          best_model_state = model.state_dict().copy()
          
          for epoch in range(epochs):
              # Training phase
              model.train()
              train_loss = 0.0
              train_correct = 0
              train_total = 0
              
              for batch_idx, (data, target) in enumerate(train_loader):
                  data, target = data.to(device), target.to(device)
                  
                  optimizer.zero_grad()
                  output = model(data)
                  loss = criterion(output, target)
                  loss.backward()
                  optimizer.step()
                  
                  train_loss += loss.item()
                  _, predicted = output.max(1)
                  train_total += target.size(0)
                  train_correct += predicted.eq(target).sum().item()
              
              train_acc = 100.0 * train_correct / train_total
              avg_train_loss = train_loss / len(train_loader)
              
              # Validation phase
              val_acc = 0.0
              avg_val_loss = 0.0
              
              if val_loader:
                  model.eval()
                  val_loss = 0.0
                  val_correct = 0
                  val_total = 0
                  
                  with torch.no_grad():
                      for data, target in val_loader:
                          data, target = data.to(device), target.to(device)
                          output = model(data)
                          loss = criterion(output, target)
                          
                          val_loss += loss.item()
                          _, predicted = output.max(1)
                          val_total += target.size(0)
                          val_correct += predicted.eq(target).sum().item()
                  
                  val_acc = 100.0 * val_correct / val_total
                  avg_val_loss = val_loss / len(val_loader)
              
              # Save epoch results
              epoch_info = {
                  'epoch': epoch + 1,
                  'train_loss': avg_train_loss,
                  'train_accuracy': train_acc,
                  'val_loss': avg_val_loss,
                  'val_accuracy': val_acc
              }
              training_history.append(epoch_info)
              
              print("Epoch " + str(epoch+1) + "/" + str(epochs) + 
                    " | Train Loss: " + "{:.4f}".format(avg_train_loss) + 
                    " | Train Acc: " + "{:.2f}%".format(train_acc) +
                    " | Val Loss: " + "{:.4f}".format(avg_val_loss) + 
                    " | Val Acc: " + "{:.2f}%".format(val_acc))
              
              # Early stopping
              if val_acc > best_val_acc:
                  best_val_acc = val_acc
                  patience_counter = 0
                  best_model_state = model.state_dict().copy()
                  print("New best model! Accuracy: " + "{:.2f}%".format(best_val_acc))
              else:
                  patience_counter += 1
                  
              if patience_counter >= patience:
                  print("Early stopping at epoch " + str(epoch+1))
                  break
          
          # Load best model weights
          model.load_state_dict(best_model_state)
          
          # Save trained model
          trained_model_file_path = "/tmp/trained_model.pth"
          torch.save({
              'model_state_dict': model.state_dict(),
              'training_history': training_history,
              'final_val_accuracy': best_val_acc,
              'config': model_config
          }, trained_model_file_path)
          
          # Create output directories
          os.makedirs(os.path.dirname(args.trained_model_path), exist_ok=True)
          os.makedirs(os.path.dirname(args.training_history), exist_ok=True)
          os.makedirs(os.path.dirname(args.final_accuracy), exist_ok=True)
          
          # Write output files
          with open(args.trained_model_path, 'w') as f:
              f.write(trained_model_file_path)
          with open(args.training_history, 'w') as f:
              json.dump(training_history, f, indent=2)
          with open(args.final_accuracy, 'w') as f:
              f.write("{:.2f}".format(best_val_acc))
          
          print("TRAINING COMPLETED SUCCESSFULLY!")
          print("Best validation accuracy: " + "{:.2f}%".format(best_val_acc))
          print("Training epochs completed: " + str(len(training_history)))
          print("Model saved to: " + trained_model_file_path)
          
      except Exception as e:
          print("TRAINING FAILED: " + str(e))
          import traceback
          traceback.print_exc()
          sys.exit(1)
    
    args:
    - --model_path
    - {inputValue: model_path}
    - --processed_data_path
    - {inputValue: processed_data_path}
    - --model_config
    - {inputValue: model_config}
    - --trained_model_path
    - {outputPath: trained_model_path}
    - --training_history
    - {outputPath: training_history}
    - --final_accuracy
    - {outputPath: final_accuracy}
