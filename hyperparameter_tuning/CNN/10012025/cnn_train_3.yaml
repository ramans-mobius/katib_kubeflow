name: 7 CNN Model Trainer
description: Trains CNN model on preprocessed data
inputs:
  - name: model_path
    type: String
    description: Path to built model file
  - name: processed_data_path
    type: String
    description: Path to preprocessed data file
  - name: model_config
    type: String
    description: Complete model configuration with training parameters
outputs:
  - name: trained_model_path
    type: String
    description: Path to trained model file
  - name: training_history
    type: String
    description: JSON string with training history and metrics
  - name: final_accuracy
    type: String
    description: Final validation accuracy

implementation:
  container:
    image: gurpreetgandhi/nesy-factory:v19
    command:
    - python3
    - -u
    - -c
    - |
      import os
      import sys
      import json
      import torch
      import torch.nn as nn
      import torch.optim as optim
      from pathlib import Path
      import pickle
      
      print("=== CNN MODEL TRAINER ===")
      
      # Parse command line arguments directly
      model_file_path = sys.argv[1]  # Direct value, not file path
      data_file_path = sys.argv[2]   # Direct value, not file path
      model_config_str = sys.argv[3]
      trained_model_path_file = sys.argv[4]
      training_history_file = sys.argv[5]
      final_accuracy_file = sys.argv[6]
      
      print("Model file path: " + model_file_path)
      print("Data file path: " + data_file_path)
      
      # Parse complete model config and extract training parameters
      model_config = json.loads(model_config_str)
      training_config = model_config.get('training', {})
      epochs = training_config.get('epochs', 2)
      learning_rate = training_config.get('learning_rate', 0.001)
      patience = training_config.get('patience', 5)
      
      print("Epochs: " + str(epochs))
      print("Learning rate: " + str(learning_rate))
      
      # Add CNN factory to path
      sys.path.insert(0, '/app/nesy_factory_cnn')
      
      try:
          from nesy_factory_cnn import BaseCNN
          
          class ConfigurableCNN(BaseCNN):
              def forward(self, x):
                  for conv_block in self.conv_blocks:
                      x = conv_block(x)
                      x = self.pool(x)
                  x = x.view(x.size(0), -1)
                  x = self.classifier(x)
                  return x
          
          # Load model from PATH
          print("Loading model...")
          with open(model_file_path, 'rb') as f:
              model = pickle.load(f)
          device = model.device
          
          # Load data from PATH
          print("Loading preprocessed data...")
          with open(data_file_path, 'rb') as f:
              processed_data = pickle.load(f)
          
          # Extract data loaders from processed data
          train_loader = processed_data.get('train_loader')
          val_loader = processed_data.get('val_loader')
          data_info = processed_data.get('data_info', {})
          
          print("Training samples: " + str(len(train_loader.dataset)))
          print("Validation samples: " + str(len(val_loader.dataset)))
          print("Number of classes: " + str(data_info['num_classes']))
          
          # Training setup
          optimizer = optim.Adam(model.parameters(), lr=learning_rate)
          criterion = nn.CrossEntropyLoss()
          
          # Training loop
          print("Starting training...")
          training_history = []
          best_val_acc = 0.0
          patience_counter = 0
          
          for epoch in range(epochs):
              # Training phase
              model.train()
              train_loss = 0.0
              train_correct = 0
              train_total = 0
              
              for data, target in train_loader:
                  data, target = data.to(device), target.to(device)
                  
                  optimizer.zero_grad()
                  output = model(data)
                  loss = criterion(output, target)
                  loss.backward()
                  optimizer.step()
                  
                  train_loss += loss.item()
                  _, predicted = output.max(1)
                  train_total += target.size(0)
                  train_correct += predicted.eq(target).sum().item()
              
              train_acc = 100.0 * train_correct / train_total
              avg_train_loss = train_loss / len(train_loader)
              
              # Validation phase
              model.eval()
              val_loss = 0.0
              val_correct = 0
              val_total = 0
              
              with torch.no_grad():
                  for data, target in val_loader:
                      data, target = data.to(device), target.to(device)
                      output = model(data)
                      loss = criterion(output, target)
                      
                      val_loss += loss.item()
                      _, predicted = output.max(1)
                      val_total += target.size(0)
                      val_correct += predicted.eq(target).sum().item()
              
              val_acc = 100.0 * val_correct / val_total
              avg_val_loss = val_loss / len(val_loader)
              
              # Save epoch results
              epoch_info = {
                  'epoch': epoch + 1,
                  'train_loss': avg_train_loss,
                  'train_accuracy': train_acc,
                  'val_loss': avg_val_loss,
                  'val_accuracy': val_acc
              }
              training_history.append(epoch_info)
              
              print("Epoch " + str(epoch+1) + "/" + str(epochs) + ": " +
                    "Train Loss: {:.4f}, Acc: {:.2f}% | ".format(avg_train_loss, train_acc) +
                    "Val Loss: {:.4f}, Acc: {:.2f}%".format(avg_val_loss, val_acc))
              
              # Early stopping check
              if val_acc > best_val_acc:
                  best_val_acc = val_acc
                  patience_counter = 0
              else:
                  patience_counter += 1
                  
              if patience_counter >= patience:
                  print("Early stopping at epoch " + str(epoch+1))
                  break
          
          # Save final trained model to fixed path
          trained_model_file_path = "/tmp/trained_model.pth"
          torch.save({
              'model_state_dict': model.state_dict(),
              'model_config': getattr(model, 'config', {}),
              'training_history': training_history,
              'final_val_accuracy': best_val_acc,
              'total_epochs': len(training_history)
          }, trained_model_file_path)
          
          # Write OUTPUT PATHS to files
          os.makedirs(os.path.dirname(trained_model_path_file), exist_ok=True)
          os.makedirs(os.path.dirname(training_history_file), exist_ok=True)
          os.makedirs(os.path.dirname(final_accuracy_file), exist_ok=True)
          
          with open(trained_model_path_file, 'w') as f:
              f.write(trained_model_file_path)
          with open(training_history_file, 'w') as f:
              json.dump(training_history, f)
          with open(final_accuracy_file, 'w') as f:
              f.write("{:.2f}".format(best_val_acc))
          
          print("Training completed!")
          print("Best validation accuracy: {:.2f}%".format(best_val_acc))
          print("Total epochs: " + str(len(training_history)))
          print("Trained model saved to: " + trained_model_file_path)
          print("MODEL TRAINING COMPLETED SUCCESSFULLY!")
          
      except Exception as e:
          print("MODEL TRAINING FAILED: " + str(e))
          import traceback
          traceback.print_exc()
          sys.exit(1)
    
    args:
    - --model_path
    - {inputValue: model_path}
    - --processed_data_path
    - {inputValue: processed_data_path}
    - --model_config
    - {inputValue: model_config}
    - --trained_model_path
    - {outputPath: trained_model_path}
    - --training_history
    - {outputPath: training_history}
    - --final_accuracy
    - {outputPath: final_accuracy}
