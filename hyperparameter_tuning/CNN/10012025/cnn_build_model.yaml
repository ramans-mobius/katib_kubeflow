name: 7 CNN Build Model
description: Instantiates a CNN model using CNNFactory with configuration
inputs:
  - name: model_config
    type: String  
    description: Complete model configuration as JSON string
  - name: model_name
    type: String
    description: CNN model architecture name
outputs:
  - name: model_path
    type: String
    description: Path to built model file
  - name: config_out
    type: String
    description: Model configuration
implementation:
  container:
    image: gurpreetgandhi/nesy-factory:v19
    command:
      - sh
      - -c
      - |
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import torch, argparse, json, os, pickle, sys
        
        # Import CNNFactory
        try:
            from nesy_factory.CNNs.factory import CNNFactory
            print("Successfully imported CNNFactory")
        except ImportError as e:
            print(f"Failed to import CNNFactory: {e}")
            sys.exit(1)

        parser = argparse.ArgumentParser()
        parser.add_argument('--model_config', type=str, required=True)
        parser.add_argument('--model_name', type=str, required=True)
        parser.add_argument('--model_path', type=str, required=True)
        parser.add_argument('--config_out', type=str, required=True)
        args = parser.parse_args()

        # Create output directories
        os.makedirs(os.path.dirname(args.model_path), exist_ok=True)
        os.makedirs(os.path.dirname(args.config_out), exist_ok=True)

        # Parse and validate configuration
        config = json.loads(args.model_config)
        model_config = config.get('model', {})
        model_config['architecture'] = args.model_name
        
        # AUTO-ADD MISSING REQUIRED PARAMETERS WITH DEFAULTS
        if 'output_dim' not in model_config:
            print(f"output_dim not found in model_config, using default: 10")
            model_config['output_dim'] = 10
        
        # Set default values for other common parameters if missing
        defaults = {
            'input_channels': 3,
            'input_size': [224, 224],
            'pretrained': True,
            'task_type': 'classification'
        }
        
        for param, default_value in defaults.items():
            if param not in model_config:
                print(f"{param} not found in model_config, using default: {default_value}")
                model_config[param] = default_value
        
        # Validate configuration structure
        print(f"Building {args.model_name} model with config:")
        for key in ['output_dim', 'input_channels', 'input_size', 'architecture', 'variant', 'pretrained']:
            if key in model_config:
                print(f"   - {key}: {model_config[key]}")
        
        print(f"   - All config keys: {list(model_config.keys())}")

        try:
            model = CNNFactory.create_model(args.model_name, model_config)
            print("CNN model created successfully")
            
            model_info = model.get_model_info()
            print(f"Model parameters: {model.get_num_parameters():,}")
            print(f"Model architecture: {model_info.get('model_name', 'Unknown')}")
            
        except Exception as e:
            print(f"Failed to create model: {e}")
            print("Configuration parameters used:")
            for key, value in model_config.items():
                print(f"   - {key}: {value}")
            sys.exit(1)

        # Save model to fixed path
        model_file_path = "/tmp/built_model.pkl"
        try:
            with open(model_file_path, 'wb') as f:
                pickle.dump(model, f)
            print(f"Model saved to {model_file_path}")
        except Exception as e:
            print(f"Failed to save model: {e}")
            sys.exit(1)

        # Write model path to output
        try:
            with open(args.model_path, 'w') as f:
                f.write(model_file_path)
            print(f"Model path written to {args.model_path}")
        except Exception as e:
            print(f"Failed to write model path: {e}")
            sys.exit(1)

        # Update the original config with the modified model_config
        config['model'] = model_config
        
        # Write config
        try:
            with open(args.config_out, 'w') as f:
                json.dump(config, f, indent=2)
            print(f"Config saved to {args.config_out}")
        except Exception as e:
            print(f"Failed to save config: {e}")
            sys.exit(1)

        print("CNN Build Model completed successfully!")
    args:
      - --model_name
      - {inputValue: model_name}
      - --model_config
      - {inputValue: model_config}
      - --model_path
      - {outputPath: model_path}
      - --config_out
      - {outputPath: config_out}
