name: 6 CNN Build Model
description: Instantiates a CNN model using CNNFactory with configuration
inputs:
  - name: model_config
    type: String  
    description: Complete model configuration as JSON string
  - name: model_name
    type: String
    description: CNN model architecture name
outputs:
  - name: model_path
    type: String
    description: Path to built model file
  - name: config_out
    type: String
    description: Model configuration
implementation:
  container:
    image: gurpreetgandhi/nesy-factory:v19
    command:
      - sh
      - -c
      - |
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import torch, argparse, json, os, pickle
        # ADD THIS IMPORT
        from nesy_factory.CNNs.factory import CNNFactory

        parser = argparse.ArgumentParser()
        parser.add_argument('--model_config', type=str, required=True)
        parser.add_argument('--model_name', type=str, required=True)
        parser.add_argument('--model_path', type=str, required=True)
        parser.add_argument('--config_out', type=str, required=True)
        args = parser.parse_args()

        config = json.loads(args.model_config)
        model_config = config.get('model', {})
        model_config['architecture'] = args.model_name

        model = CNNFactory.create_model(args.model_name, model_config)
        print("CNN model created successfully")

        model_info = model.get_model_info()
        print(f"Model parameters: {model.get_num_parameters()}")

        # Save model to fixed path
        model_file_path = "/tmp/built_model.pkl"
        with open(model_file_path, 'wb') as f:
            pickle.dump(model, f)

        # Write model path to output
        with open(args.model_path, 'w') as f:
            f.write(model_file_path)

        # Write config
        with open(args.config_out, 'w') as f:
            json.dump(config, f, indent=2)

        print(f"Model saved to {model_file_path}")
        print(f"Config saved to {args.config_out}")
    args:
      - --model_name
      - {inputValue: model_name}
      - --model_config
      - {inputValue: model_config}
      - --model_path
      - {outputPath: model_path}
      - --config_out
      - {outputPath: config_out}
