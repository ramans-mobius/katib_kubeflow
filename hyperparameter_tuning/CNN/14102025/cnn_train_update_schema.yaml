name: 2 Train Update Schema Row
description: Updates a row in a schema based on a mapping between column names and a JSON object.

inputs:
  - { name: schema_id, type: String, description: "The ID of the schema to update." }
  - { name: update_data_json, type: String, description: "JSON string containing the data to update." }
  - { name: mapping_json, type: String, description: "JSON string mapping column names to keys in update_data_json." }
  - { name: model_id, type: String, description: "The ID of the model to filter by." }
  - { name: execution_id, type: String, description: "The ID of the model to filter by." }
  - { name: tenant_id, type: string, description: "The ID of the tenant." }
  - { name: project_id, type: String, description: "The ID of the project." }
  - { name: architecture_type, type: String, description: "The architecture type." }
  - { name: multiple_rows_json, type: String, description: "JSON string containing a list of rows to create." }
  - { name: bearer_auth_token, type: string, description: "Bearer token for authentication." }
  - { name: domain, type: String, description: "The domain for the API endpoint." }
  - { name: float_keys_json, type: String, description: "JSON string of a list of keys to be converted to float."}

implementation:
  container:
    image: python:3.9-slim
    command:
      - sh
      - -c
      - |
        pip install requests
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import json
        import argparse
        import requests
        from requests.adapters import HTTPAdapter
        from urllib3.util.retry import Retry

        parser = argparse.ArgumentParser()
        parser.add_argument('--schema_id', type=str, required=True)
        parser.add_argument('--update_data_json', type=str, required=True)
        parser.add_argument('--mapping_json', type=str, required=True)
        parser.add_argument('--model_id', type=str, required=True)
        parser.add_argument('--execution_id', type=str, required=True)
        parser.add_argument('--tenant_id', type=str, required=True)
        parser.add_argument('--project_id', type=str, required=True)
        parser.add_argument('--architecture_type', type=str, required=True)
        parser.add_argument('--multiple_rows_json', type=str, required=True)
        parser.add_argument('--bearer_auth_token', type=str, required=True)
        parser.add_argument('--domain', type=str, required=True)
        parser.add_argument('--float_keys_json', type=str, required=False)
        args = parser.parse_args()

        with open(args.bearer_auth_token, 'r') as f:
            bearer_auth_token = f.read().strip()

        with open(args.tenant_id, 'r') as f:
            tenant_id = f.read().strip()

        print(f" Input Data ")
        print(f"update_data_json: {args.update_data_json}")
        print(f"mapping_json: {args.mapping_json}")
        
        update_data = json.loads(args.update_data_json)
        mapping = json.loads(args.mapping_json)
        float_keys = json.loads(args.float_keys_json)

        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {bearer_auth_token}'
        }

        def calculate_best_epoch(training_data):
         
            if 'val_loss' in training_data and isinstance(training_data['val_loss'], list):
                val_losses = training_data['val_loss']
                try:
                    # Find epoch with minimum validation loss (0-based index)
                    best_epoch_index = val_losses.index(min(val_losses))
                    # Convert to 1-based epoch number
                    return best_epoch_index + 1
                except (ValueError, AttributeError):
                    return None
            return None

        def convert_value_for_schema(column, value, schema_id):
        
            # Special handling for TrainingLogs schema float fields
            if schema_id == "68c7af1af34309622134ee53":  # TrainingLogs schema
                # Force convert these fields to string to avoid FLOAT rejection
                float_fields_to_force_string = ['loss', 'validation_loss', 'accuracy', 'validation_accuracy']
                if column in float_fields_to_force_string:
                    return str(value)
            return value

        retry_strategy = Retry(
            total=3,
            status_forcelist=[408, 500, 502, 503, 504],
            allowed_methods=["HEAD", "GET", "PUT", "POST", "DELETE", "OPTIONS", "TRACE"],
            backoff_factor=1
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        http = requests.Session()
        http.mount("https://", adapter)
        http.mount("http://", adapter)

        if args.multiple_rows_json != '-1':
            rows_to_create = json.loads(args.multiple_rows_json)
            for row in rows_to_create:
                if args.tenant_id != '-1':
                    with open(args.tenant_id, 'r') as f:
                        row['tenant_id'] = f.read().strip()
                if args.project_id != '-1':
                    row['project_id'] = args.project_id
                if args.architecture_type != '-1':
                    row['architecture_type'] = args.architecture_type
                if 'execution_id' not in row and args.execution_id != '-1':
                    row['execution_id']=args.execution_id
                    
            
            create_url = f"{args.domain}/pi-entity-instances-service/v2.0/schemas/{args.schema_id}/instances"
            create_payload = {"data": rows_to_create}
            
            print(f" Creating Multiple Rows ")
            print(f"Request URL: POST {create_url}")
            print(f"Request Headers: {json.dumps(headers)}")
            print(f"Request Payload: {json.dumps(create_payload, indent=2)}")

            try:
                response = http.post(create_url, headers=headers, data=json.dumps(create_payload), timeout=60)
                response.raise_for_status()
                print("Successfully created multiple model instances.")
                print(f"Response: {response.json()}")
            except requests.exceptions.RequestException as e:
                print(f"Error creating multiple model instances: {e}")
                print(f"Failed Request Payload: {json.dumps(create_payload, indent=2)}")
                if e.response:
                    print(f"Response Status Code: {e.response.status_code}")
                    print(f"Response Content: {e.response.text}")
                exit(1)
        else:
            # Check if execution_id exists
            check_url = f"{args.domain}/pi-entity-instances-service/v3.0/schemas/{args.schema_id}/instances/list"
            check_payload = {
                "dbType": "TIDB",
                "ownedOnly": True,
                "filter": {
                    "execution_id": args.execution_id
                }
            }
            
            print(f" Checking for Existing Row with execution_id: {args.execution_id} ")
            print(f"Request URL: POST {check_url}")
            print(f"Request Headers: {json.dumps(headers)}")
            print(f"Request Payload: {json.dumps(check_payload, indent=2)}")

            try:
                response = http.post(check_url, headers=headers, data=json.dumps(check_payload), timeout=60)
                response.raise_for_status()
                response_data = response.json()
                
                if response_data.get("content"):
                    print(f" Instance Found: Updating Row ")
                    patch_requests = []
                    for column, keys in mapping.items():
                        value_to_patch = None
                        
                        # Handle special case for epoch calculation
                        if keys == "calculate_best_epoch":
                            value_to_patch = calculate_best_epoch(update_data)
                            print(f"DEBUG: Calculated best epoch: {value_to_patch}")
                        elif isinstance(keys, list):
                            value_to_patch = {key: update_data.get(key) for key in keys if key in update_data}
                        else:
                            if keys in update_data:
                                value = update_data.get(keys)
                                if keys in float_keys:
                                    try:
                                        value_to_patch = float(value)
                                    except (ValueError, TypeError):
                                        value_to_patch = str(value)
                                else:
                                    value_to_patch = str(value)

                        # Apply schema-specific conversion
                        if value_to_patch is not None:
                            value_to_patch = convert_value_for_schema(column, value_to_patch, args.schema_id)
                            patch_requests.append({
                                "operation": "REPLACE",
                                "path": column,
                                "value": value_to_patch
                            })

                    update_url = f"{args.domain}/pi-entity-instances-service/v2.0/schemas/{args.schema_id}/instances"
                    update_payload = {
                        "dbType": "TIDB",
                        "conditionalFilter": {
                            "conditions": [
                                {
                                    "field": "execution_id",
                                    "operator": "EQUAL",
                                    "value": args.execution_id
                                }
                            ]
                        },
                        "partialUpdateRequests": [
                            {
                                "patch": patch_requests
                            }
                        ]
                    }
                    
                    print(f"Request URL: PATCH {update_url}")
                    print(f"Request Headers: {json.dumps(headers)}")
                    print(f"Request Payload: {json.dumps(update_payload, indent=2)}")
                    
                    response = http.patch(update_url, headers=headers, data=json.dumps(update_payload), timeout=60)
                    response.raise_for_status()
                    print("Successfully updated the model instance.")
                else:
                    print(f" No Instance Found: Creating New Row ")
                    creation_data = {}
                    for column, keys in mapping.items():
                        value_to_add = None
                        
                        # Handle special case for epoch calculation
                        if keys == "calculate_best_epoch":
                            value_to_add = calculate_best_epoch(update_data)
                            print(f"DEBUG: Calculated best epoch: {value_to_add}")
                        elif isinstance(keys, list):
                            value_to_add = {key: update_data.get(key) for key in keys if key in update_data}
                        else:
                            if keys in update_data:
                                value = update_data.get(keys)
                                if keys in float_keys:
                                    try:
                                        value_to_add = float(value)
                                    except (ValueError, TypeError):
                                        value_to_add = str(value)
                                else:
                                    value_to_add = str(value)

                        # Apply schema-specific conversion
                        if value_to_add is not None:
                            value_to_add = convert_value_for_schema(column, value_to_add, args.schema_id)
                            creation_data[column] = value_to_add
                    
                    creation_data['execution_id'] = args.execution_id
                    if args.model_id != '-1':
                        creation_data['model_id'] = args.model_id
                    if args.tenant_id != '-1':
                        creation_data['tenant_id'] = tenant_id
                    if args.project_id != '-1':
                        creation_data['project_id'] = args.project_id
                    if args.architecture_type != '-1':
                        creation_data['architecture_type'] = args.architecture_type

                    create_url = f"{args.domain}/pi-entity-instances-service/v2.0/schemas/{args.schema_id}/instances"
                    create_payload = {
                        "data": [creation_data]
                    }

                    print(f"Request URL: POST {create_url}")
                    print(f"Request Headers: {json.dumps(headers)}")
                    print(f"Request Payload: {json.dumps(create_payload, indent=2)}")
                    
                    response = http.post(create_url, headers=headers, data=json.dumps(create_payload), timeout=60)
                    if response.status_code >= 400:
                        print(f"Error: {response.status_code} {response.reason}")
                        print(f"Response Content: {response.text}")
                    response.raise_for_status()
                    print("Successfully created a new model instance.")
                    
                print(f"Response: {response.json()}")

            except requests.exceptions.RequestException as e:
                print(f"Error: {e}")
                if e.response is not None:
                    print(f"Response Status Code: {e.response.status_code}")
                    print(f"Response Content: {e.response.text}")
                exit(1)

    args:
      - --schema_id
      - {inputValue: schema_id}
      - --update_data_json
      - {inputValue: update_data_json}
      - --mapping_json
      - {inputValue: mapping_json}
      - --model_id
      - {inputValue: model_id}
      - --execution_id
      - {inputValue: execution_id}
      - --tenant_id
      - {inputPath: tenant_id}
      - --project_id
      - {inputValue: project_id}
      - --architecture_type
      - {inputValue: architecture_type}
      - --multiple_rows_json
      - {inputValue: multiple_rows_json}
      - --bearer_auth_token
      - {inputPath: bearer_auth_token}
      - --domain
      - {inputValue: domain}
      - --float_keys_json
      - {inputValue: float_keys_json}
