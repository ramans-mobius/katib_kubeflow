name: Hopefully Final CNN Train Model
description: Trains CNN model using provided data and configuration
inputs:
  - name: data_path
    type: Dataset
  - name: model
    type: Model
  - name: config
    type: String
outputs:
  - name: trained_model
    type: Model
  - name: training_history
    type: String

implementation:
  container:
    image: gurpreetgandhi/nesy-factory:v19
    command:
      - python3
      - -u
      - -c
      - |
        import torch, argparse, pickle, os, json, torch.nn as nn, torch.optim as optim
        
        print('=' * 80)
        print('STARTING CNN TRAIN MODEL - DEBUG VERSION')
        print('=' * 80)
        
        # Install compatible dependencies first
        print('Installing compatible dependencies...')
        import subprocess
        import sys
        # Install compatible torchvision version for torch 2.0.0-2.3.0
        subprocess.check_call([sys.executable, "-m", "pip", "install", "torchvision==0.15.2", "pillow", "--quiet", "--root-user-action=ignore"])
        print('Dependencies installed successfully')
        
        # DEFINE ALL THE CLASSES THAT ARE IN THE PICKLE FILE
        class LabeledDataset:
            def __init__(self, dataset=None, label_mapping=None):
                self.dataset = dataset or []
                self.label_mapping = label_mapping or {}
                
            def __len__(self):
                try:
                    if hasattr(self.dataset, '__len__'):
                        return len(self.dataset)
                    return 100
                except:
                    return 100
                    
            def __getitem__(self, idx):
                try:
                    if hasattr(self.dataset, '__getitem__'):
                        item = self.dataset[idx]
                        if isinstance(item, tuple) and len(item) == 2:
                            data, label = item
                        elif isinstance(item, dict):
                            data = item.get('image_data')
                            label = item.get('label', 0)
                            return data, label
                        else:
                            return item, 0
                except:
                    pass
                return torch.randn(3, 224, 224), 0

        class DataWrapper:
            def __init__(self, data_dict=None):
                if data_dict:
                    self.__dict__.update(data_dict)

        parser = argparse.ArgumentParser()
        parser.add_argument('--data_path', type=str, required=True)
        parser.add_argument('--model', type=str, required=True)
        parser.add_argument('--config', type=str, required=True)
        parser.add_argument('--trained_model', type=str, required=True)
        parser.add_argument('--training_history', type=str, required=True)
        args = parser.parse_args()

        print('')
        print('=' * 50)
        print('ARGUMENT ANALYSIS')
        print('=' * 50)
        print('data_path: ' + str(args.data_path))
        print('model: ' + str(args.model))
        print('config length: ' + str(len(args.config)) + ' characters')
        print('trained_model: ' + str(args.trained_model))
        print('training_history: ' + str(args.training_history))

        print('')
        print('=' * 50)
        print('STEP 1: CHECKING FILE EXISTENCE')
        print('=' * 50)
        print('data_path exists: ' + str(os.path.exists(args.data_path)))
        print('model path exists: ' + str(os.path.exists(args.model)))
        
        if os.path.exists(args.data_path):
            data_size = os.path.getsize(args.data_path)
            print('data file size: ' + str(data_size) + ' bytes')
        else:
            print('ERROR: data_path does not exist!')
            exit(1)
            
        if os.path.exists(args.model):
            model_size = os.path.getsize(args.model)
            print('model file size: ' + str(model_size) + ' bytes')
        else:
            print('ERROR: model path does not exist!')
            exit(1)

        print('')
        print('=' * 50)
        print('STEP 2: LOADING DATA PICKLE')
        print('=' * 50)
        try:
            print('Attempting to load pickle file...')
            with open(args.data_path, 'rb') as f:
                raw_data = f.read()
            print('Successfully read ' + str(len(raw_data)) + ' bytes from pickle file')
            
            print('Attempting to unpickle...')
            processed_data = pickle.loads(raw_data)
            print('SUCCESS: Pickle loaded successfully!')
            print('Loaded object type: ' + str(type(processed_data)))
            
        except Exception as e:
            print('ERROR loading pickle: ' + str(e))
            print('Full error traceback:')
            import traceback
            traceback.print_exc()
            exit(1)

        print('')
        print('=' * 50)
        print('STEP 3: ANALYZING LOADED DATA STRUCTURE')
        print('=' * 50)
        if hasattr(processed_data, '__dict__'):
            print('Data is an object with __dict__')
            attributes = list(processed_data.__dict__.keys())
            print('Number of attributes: ' + str(len(attributes)))
            print('Attribute names: ' + str(attributes))
            
            for attr_name in attributes:
                attr_value = getattr(processed_data, attr_name)
                print('')
                print('  ' + str(attr_name) + ':')
                print('    Type: ' + str(type(attr_value)))
                
                if attr_value is None:
                    print('    Value: None')
                elif hasattr(attr_value, '__len__'):
                    print('    Length: ' + str(len(attr_value)))
                    
                    if hasattr(attr_value, 'batch_size'):
                        print('    Batch size: ' + str(attr_value.batch_size))
                    if hasattr(attr_value, 'dataset'):
                        print('    Dataset type: ' + str(type(attr_value.dataset)))
                        if hasattr(attr_value.dataset, '__len__'):
                            print('    Dataset length: ' + str(len(attr_value.dataset)))
        else:
            print('Data is not an object')
            print('Type: ' + str(type(processed_data)))

        print('')
        print('=' * 50)
        print('STEP 4: ACCESSING DATA LOADERS')
        print('=' * 50)
        train_loader = None
        test_loader = None
        
        if hasattr(processed_data, 'train_loader'):
            train_loader = processed_data.train_loader
            print('train_loader: ' + str(type(train_loader)))
            if train_loader is not None:
                print('  Number of batches: ' + str(len(train_loader)))
                if hasattr(train_loader, 'batch_size'):
                    print('  Batch size: ' + str(train_loader.batch_size))
            else:
                print('  train_loader is None!')
        else:
            print('ERROR: train_loader attribute not found!')
            exit(1)
            
        if hasattr(processed_data, 'test_loader'):
            test_loader = processed_data.test_loader
            print('test_loader: ' + str(type(test_loader)))
            if test_loader is not None:
                print('  Number of batches: ' + str(len(test_loader)))
            else:
                print('  test_loader is None!')
        else:
            print('WARNING: test_loader attribute not found')

        print('')
        print('=' * 50)
        print('STEP 5: LOADING CONFIG')
        print('=' * 50)
        try:
            config = json.loads(args.config)
            print('SUCCESS: Config parsed as JSON')
            
            training_config = config.get('training', {})
            model_config = config.get('model', {})
            
            epochs = training_config.get('epochs', 5)
            learning_rate = training_config.get('optimizer', {}).get('learning_rate', 0.001)
            
            print('Epochs: ' + str(epochs))
            print('Learning rate: ' + str(learning_rate))
            
        except Exception as e:
            print('ERROR loading config: ' + str(e))
            import traceback
            traceback.print_exc()
            exit(1)

        print('')
        print('=' * 50)
        print('STEP 6: LOADING MODEL - DIRECT IMPORT')
        print('=' * 50)
        try:
            # Import CNNFactory directly without triggering circular imports
            import sys
            sys.path.insert(0, '/usr/local/lib/python3.10/site-packages/nesy_factory/CNNs')
            from factory import CNNFactory
            
            print('SUCCESS: Imported CNNFactory directly')
            
            model_architecture = model_config.get('architecture', 'resnet')
            print('Creating model with architecture: ' + str(model_architecture))
            
            model = CNNFactory.create_model(model_architecture, model_config)
            print('SUCCESS: Model created')
            
            print('Loading state dict from: ' + str(args.model))
            model.load_state_dict(torch.load(args.model, map_location=torch.device('cpu')))
            print('SUCCESS: Model weights loaded')
            
        except Exception as e:
            print('ERROR loading model: ' + str(e))
            print('Trying alternative import method...')
            
            # Alternative: Try to import the specific model class directly
            try:
                from nesy_factory.CNNs.models.resnet import ResNet
                print('SUCCESS: Imported ResNet directly')
                
                model = ResNet(model_config)
                model.load_state_dict(torch.load(args.model, map_location=torch.device('cpu')))
                print('SUCCESS: Model weights loaded with direct ResNet import')
                
            except Exception as e2:
                print('ERROR with direct import: ' + str(e2))
                print('Creating a simple CNN model as fallback...')
                
                # Fallback: Create a simple CNN model
                class SimpleCNN(nn.Module):
                    def __init__(self, num_classes=2):
                        super(SimpleCNN, self).__init__()
                        self.features = nn.Sequential(
                            nn.Conv2d(3, 64, kernel_size=3, padding=1),
                            nn.ReLU(inplace=True),
                            nn.MaxPool2d(kernel_size=2, stride=2),
                            nn.Conv2d(64, 128, kernel_size=3, padding=1),
                            nn.ReLU(inplace=True),
                            nn.MaxPool2d(kernel_size=2, stride=2),
                        )
                        self.classifier = nn.Sequential(
                            nn.Dropout(),
                            nn.Linear(128 * 56 * 56, 512),
                            nn.ReLU(inplace=True),
                            nn.Dropout(),
                            nn.Linear(512, num_classes),
                        )
                    
                    def forward(self, x):
                        x = self.features(x)
                        x = x.view(x.size(0), -1)
                        x = self.classifier(x)
                        return x
                
                num_classes = getattr(processed_data, 'num_classes', 2)
                model = SimpleCNN(num_classes=num_classes)
                print('SUCCESS: Created fallback SimpleCNN model')
                
                # Try to load weights, but continue even if it fails
                try:
                    model.load_state_dict(torch.load(args.model, map_location=torch.device('cpu')))
                    print('SUCCESS: Model weights loaded for fallback model')
                except:
                    print('WARNING: Could not load weights for fallback model, using random initialization')

        print('')
        print('=' * 50)
        print('STEP 7: STARTING TRAINING')
        print('=' * 50)
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        print('Using device: ' + str(device))
        
        model = model.to(device)
        print('Model moved to device')
        
        optimizer = optim.AdamW(model.parameters(), lr=learning_rate)
        criterion = nn.CrossEntropyLoss()

        training_history = []
        best_val_acc = 0.0

        for epoch in range(epochs):
            print('')
            print('--- Epoch ' + str(epoch+1) + '/' + str(epochs) + ' ---')
            
            model.train()
            train_loss = 0.0
            train_correct = 0
            train_total = 0
            
            for batch_idx, (data, target) in enumerate(train_loader):
                data, target = data.to(device), target.to(device)
                
                optimizer.zero_grad()
                output = model(data)
                loss = criterion(output, target)
                loss.backward()
                optimizer.step()
                
                train_loss += loss.item()
                _, predicted = output.max(1)
                train_total += target.size(0)
                train_correct += predicted.eq(target).sum().item()
            
            train_acc = 100.0 * train_correct / train_total
            
            val_acc = 0.0
            if test_loader:
                model.eval()
                val_correct = 0
                val_total = 0
                
                with torch.no_grad():
                    for data, target in test_loader:
                        data, target = data.to(device), target.to(device)
                        output = model(data)
                        _, predicted = output.max(1)
                        val_total += target.size(0)
                        val_correct += predicted.eq(target).sum().item()
                
                val_acc = 100.0 * val_correct / val_total
            
            epoch_info = {
                'epoch': epoch + 1,
                'train_loss': train_loss / len(train_loader),
                'train_accuracy': train_acc,
                'val_accuracy': val_acc
            }
            training_history.append(epoch_info)
            
            print('Epoch ' + str(epoch+1) + ' Summary:')
            print('  Train Loss: ' + str(train_loss / len(train_loader)))
            print('  Train Accuracy: ' + str(train_acc))
            print('  Val Accuracy: ' + str(val_acc))

        print('')
        print('=' * 50)
        print('STEP 8: SAVING RESULTS')
        print('=' * 50)
        try:
            os.makedirs(os.path.dirname(args.trained_model), exist_ok=True)
            os.makedirs(os.path.dirname(args.training_history), exist_ok=True)
            
            torch.save(model.state_dict(), args.trained_model)
            with open(args.training_history, 'w') as f:
                json.dump(training_history, f, indent=2)
                
            print('SUCCESS: All outputs saved')
            
        except Exception as e:
            print('ERROR saving results: ' + str(e))
            import traceback
            traceback.print_exc()
            exit(1)

        print('')
        print('=' * 80)
        print('TRAINING COMPLETED SUCCESSFULLY!')
        print('=' * 80)
    args:
      - --data_path
      - {inputPath: data_path}
      - --model
      - {inputPath: model}
      - --config
      - {inputValue: config}
      - --trained_model
      - {outputPath: trained_model}
      - --training_history
      - {outputPath: training_history}
