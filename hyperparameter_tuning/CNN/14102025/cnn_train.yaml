name: CNN Model Trainer
description: Trains CNN model on preprocessed data
inputs:
  - name: model_config
    type: String
    description: Complete model configuration as JSON string
outputs:
  - name: trained_model_path
    type: String
    description: Path to trained model file
  - name: training_history
    type: String
    description: JSON string with training history and metrics
  - name: final_accuracy
    type: String
    description: Final validation accuracy

implementation:
  container:
    image: gurpreetgandhi/nesy-factory:v19
    command:
    - python3
    - -u
    - -c
    - |
      import os
      import sys
      import json
      import torch
      import torch.nn as nn
      import torch.optim as optim
      import pickle
      
      print("CNN MODEL TRAINER STARTED")
      
      import argparse
      parser = argparse.ArgumentParser()
      parser.add_argument('--model_config', type=str, required=True)
      parser.add_argument('--trained_model_path', type=str, required=True)
      parser.add_argument('--training_history', type=str, required=True)
      parser.add_argument('--final_accuracy', type=str, required=True)
      args = parser.parse_args()
      
      # Use fixed shared paths
      model_file_path = "/shared-workspace/built_model.pkl"
      data_file_path = "/shared-workspace/downloaded_data.pkl"
      
      print("USING FIXED PATHS:")
      print(f"Model file: {model_file_path}")
      print(f"Data file: {data_file_path}")
      
      # Check if files exist
      if not os.path.exists(model_file_path):
          print(f"ERROR: Model file does not exist: {model_file_path}")
          sys.exit(1)
      
      if not os.path.exists(data_file_path):
          print(f"ERROR: Data file does not exist: {data_file_path}")
          sys.exit(1)
      
      # PARSE CONFIG
      try:
          model_config = json.loads(args.model_config)
          print("CONFIG PARSED SUCCESSFULLY")
      except json.JSONDecodeError as e:
          print("ERROR: Failed to parse config JSON: " + str(e))
          sys.exit(1)
      
      # EXTRACT TRAINING PARAMETERS
      training_config = model_config.get('training', {})
      optimizer_config = training_config.get('optimizer', {})
      
      epochs = training_config.get('epochs', 5)
      learning_rate = optimizer_config.get('learning_rate', 0.001)
      weight_decay = optimizer_config.get('weight_decay', 0.0001)
      batch_size = training_config.get('batch_size', 16)
      patience = training_config.get('patience', 3)
      
      print("TRAINING PARAMETERS:")
      print(f"  Epochs: {epochs}")
      print(f"  Learning rate: {learning_rate}")
      print(f"  Weight decay: {weight_decay}")
      print(f"  Batch size: {batch_size}")
      print(f"  Patience: {patience}")
      
      try:
          print("LOADING MODEL AND DATA")
          
          # Load model
          print("Loading model from: " + model_file_path)
          with open(model_file_path, 'rb') as f:
              model = pickle.load(f)
          
          device = model.device if hasattr(model, 'device') else torch.device('cuda' if torch.cuda.is_available() else 'cpu')
          model = model.to(device)
          print("Model loaded successfully")
          print("Model device: " + str(device))
          
          # Load data
          print("Loading data from: " + data_file_path)
          with open(data_file_path, 'rb') as f:
              processed_data = pickle.load(f)
          
          print("Data loaded successfully")
          print("Data keys: " + str(list(processed_data.keys())))
          
          # Extract data loaders
          train_loader = processed_data.get('train_loader')
          val_loader = processed_data.get('val_loader')
          data_info = processed_data.get('data_info', {})
          
          if train_loader is None:
              print("ERROR: train_loader is None in processed data")
              sys.exit(1)
              
          print("Training samples: " + str(len(train_loader.dataset)))
          if val_loader:
              print("Validation samples: " + str(len(val_loader.dataset)))
          else:
              print("No validation loader found")
          
          # TRAINING SETUP
          optimizer = optim.AdamW(model.parameters(), lr=learning_rate, weight_decay=weight_decay)
          criterion = nn.CrossEntropyLoss()
          
          print(f"STARTING TRAINING FOR {epochs} EPOCHS")
          training_history = []
          best_val_acc = 0.0
          patience_counter = 0
          best_model_state = model.state_dict().copy()
          
          for epoch in range(epochs):
              # Training phase
              model.train()
              train_loss = 0.0
              train_correct = 0
              train_total = 0
              
              for batch_idx, (data, target) in enumerate(train_loader):
                  data, target = data.to(device), target.to(device)
                  
                  optimizer.zero_grad()
                  output = model(data)
                  loss = criterion(output, target)
                  loss.backward()
                  optimizer.step()
                  
                  train_loss += loss.item()
                  _, predicted = output.max(1)
                  train_total += target.size(0)
                  train_correct += predicted.eq(target).sum().item()
              
              train_acc = 100.0 * train_correct / train_total
              avg_train_loss = train_loss / len(train_loader)
              
              # Validation phase
              val_acc = 0.0
              avg_val_loss = 0.0
              
              if val_loader:
                  model.eval()
                  val_loss = 0.0
                  val_correct = 0
                  val_total = 0
                  
                  with torch.no_grad():
                      for data, target in val_loader:
                          data, target = data.to(device), target.to(device)
                          output = model(data)
                          loss = criterion(output, target)
                          
                          val_loss += loss.item()
                          _, predicted = output.max(1)
                          val_total += target.size(0)
                          val_correct += predicted.eq(target).sum().item()
                  
                  val_acc = 100.0 * val_correct / val_total
                  avg_val_loss = val_loss / len(val_loader)
              
              # Save epoch results
              epoch_info = {
                  'epoch': epoch + 1,
                  'train_loss': avg_train_loss,
                  'train_accuracy': train_acc,
                  'val_loss': avg_val_loss,
                  'val_accuracy': val_acc
              }
              training_history.append(epoch_info)
              
              print(f"Epoch {epoch+1}/{epochs} | Train Loss: {avg_train_loss:.4f} | Train Acc: {train_acc:.2f}% | Val Loss: {avg_val_loss:.4f} | Val Acc: {val_acc:.2f}%")
              
              # Early stopping
              if val_acc > best_val_acc:
                  best_val_acc = val_acc
                  patience_counter = 0
                  best_model_state = model.state_dict().copy()
                  print("New best model! Accuracy: " + "{:.2f}%".format(best_val_acc))
              else:
                  patience_counter += 1
                  
              if patience_counter >= patience:
                  print("Early stopping at epoch " + str(epoch+1))
                  break
          
          # Load best model weights
          model.load_state_dict(best_model_state)
          
          # Save trained model to shared location
          trained_model_file_path = "/shared-workspace/trained_model.pth"
          torch.save({
              'model_state_dict': model.state_dict(),
              'training_history': training_history,
              'final_val_accuracy': best_val_acc,
              'config': model_config
          }, trained_model_file_path)
          
          # Create output directories
          os.makedirs(os.path.dirname(args.trained_model_path), exist_ok=True)
          os.makedirs(os.path.dirname(args.training_history), exist_ok=True)
          os.makedirs(os.path.dirname(args.final_accuracy), exist_ok=True)
          
          # Write output files
          with open(args.trained_model_path, 'w') as f:
              f.write(trained_model_file_path)
          with open(args.training_history, 'w') as f:
              json.dump(training_history, f, indent=2)
          with open(args.final_accuracy, 'w') as f:
              f.write("{:.2f}".format(best_val_acc))
          
          print("TRAINING COMPLETED SUCCESSFULLY!")
          print("Best validation accuracy: " + "{:.2f}%".format(best_val_acc))
          print("Training epochs completed: " + str(len(training_history)))
          print("Model saved to: " + trained_model_file_path)
          
      except Exception as e:
          print("TRAINING FAILED: " + str(e))
          import traceback
          traceback.print_exc()
          sys.exit(1)
    
    args:
    - --model_config
    - {inputValue: model_config}
    - --trained_model_path
    - {outputPath: trained_model_path}
    - --training_history
    - {outputPath: training_history}
    - --final_accuracy
    - {outputPath: final_accuracy}
