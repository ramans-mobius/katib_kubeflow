name: F CNN Train Model
description: Trains CNN model using provided data and configuration
inputs:
  - name: data_path
    type: Dataset
  - name: model
    type: Model
  - name: config
    type: String
outputs:
  - name: trained_model
    type: Model
  - name: training_history
    type: String

implementation:
  container:
    image: gurpreetgandhi/nesy-factory:v19
    command:
      - python3
      - -u
      - -c
      - |
        import torch, argparse, pickle, os, json, torch.nn as nn, torch.optim as optim
        import sys, traceback

        print("STARTING CNN TRAIN MODEL")

        class LabeledDataset:
            def __init__(self, dataset=None, label_mapping=None):
                self.dataset = dataset or []
                self.label_mapping = label_mapping or {}
            def __len__(self):
                try:
                    if hasattr(self.dataset, '__len__'):
                        return len(self.dataset)
                    return 100
                except:
                    return 100
            def __getitem__(self, idx):
                try:
                    if hasattr(self.dataset, '__getitem__'):
                        item = self.dataset[idx]
                        if isinstance(item, tuple) and len(item) == 2:
                            data, label = item
                        elif isinstance(item, dict):
                            data = item.get('image_data')
                            label = item.get('label', 0)
                            return data, label
                        else:
                            return item, 0
                except:
                    pass
                return torch.randn(3, 224, 224), 0

        class SimpleDataset:
            def __init__(self, data=None):
                self.data = data or []
            def __len__(self):
                try:
                    if hasattr(self.data, '__len__'):
                        length = len(self.data)
                        if length > 0:
                            return length
                except:
                    pass
                return 100
            def __getitem__(self, idx):
                try:
                    if hasattr(self.data, '__getitem__'):
                        item = self.data[idx]
                        if isinstance(item, tuple) and len(item) == 2:
                            return item
                        elif isinstance(item, dict):
                            data = item.get('image_data')
                            label = item.get('label', 0)
                            return data, label
                        else:
                            return item, 0
                except:
                    pass
                return torch.randn(3, 224, 224), 0

        class DataWrapper:
            def __init__(self, data_dict=None):
                if data_dict:
                    self.__dict__.update(data_dict)

        parser = argparse.ArgumentParser()
        parser.add_argument('--data_path', type=str, required=True)
        parser.add_argument('--model', type=str, required=True)
        parser.add_argument('--config', type=str, required=True)
        parser.add_argument('--trained_model', type=str, required=True)
        parser.add_argument('--training_history', type=str, required=True)
        args = parser.parse_args()

        print("Arguments loaded")

        if not os.path.exists(args.data_path):
            print("ERROR: data_path does not exist!")
            sys.exit(1)
        if not os.path.exists(args.model):
            print("ERROR: model path does not exist!")
            sys.exit(1)

        processed_data = None
        try:
            with open(args.data_path, 'rb') as f:
                raw_data = f.read()
            class SafeUnpickler(pickle.Unpickler):
                def find_class(self, module, name):
                    try:
                        return super().find_class(module, name)
                    except:
                        if name == 'LabeledDataset':
                            return LabeledDataset
                        elif name == 'DataWrapper':
                            return DataWrapper
                        elif name == 'SimpleDataset':
                            return SimpleDataset
                        else:
                            class FallbackClass:
                                def __init__(self, *args, **kwargs):
                                    pass
                            return FallbackClass
            import io
            processed_data = SafeUnpickler(io.BytesIO(raw_data)).load()
            print("Data loaded successfully")
        except Exception as e:
            print("ERROR loading pickle: " + str(e))
            sys.exit(1)

        train_loader = None
        test_loader = None
        if hasattr(processed_data, 'train_loader'):
            train_loader = processed_data.train_loader
        else:
            print("ERROR: train_loader not found!")
            sys.exit(1)
        if hasattr(processed_data, 'test_loader'):
            test_loader = processed_data.test_loader

        try:
            config = json.loads(args.config)
            training_config = config.get('training', {})
            model_config = config.get('model', {})
            epochs = training_config.get('epochs', 5)
            learning_rate = training_config.get('optimizer', {}).get('learning_rate', 0.001)
            print("Config loaded: " + str(epochs) + " epochs, lr=" + str(learning_rate))
        except Exception as e:
            print("ERROR loading config: " + str(e))
            sys.exit(1)

        try:
            sys.path.insert(0, '/usr/local/lib/python3.10/site-packages')
            from nesy_factory.CNNs.registry import create_model as create_cnn_model
            model_architecture = model_config.get('architecture', 'resnet')
            if hasattr(processed_data, 'num_classes'):
                model_config['output_dim'] = processed_data.num_classes
            elif hasattr(processed_data, 'class_names'):
                model_config['output_dim'] = len(processed_data.class_names)
            model = create_cnn_model(model_architecture, model_config)
            model.load_state_dict(torch.load(args.model, map_location=torch.device('cpu')))
            print("Model loaded: " + model_architecture)
        except Exception as e:
            print("ERROR loading model: " + str(e))
            sys.exit(1)

        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        model = model.to(device)
        optimizer = optim.Adam(model.parameters(), lr=learning_rate)
        criterion = nn.CrossEntropyLoss()

        history = {
            'train_loss': [], 'train_acc': [],
            'val_loss': [], 'val_acc': [],
            'best_val_acc': 0.0, 'best_val_loss': float('inf')
        }

        print("Starting training...")
        for epoch in range(epochs):
            model.train()
            train_loss = 0.0
            train_correct = 0
            train_total = 0

            for images, labels in train_loader:
                if images.numel() == 0:
                    continue
                images, labels = images.to(device), labels.to(device)
                if images.dtype != torch.float32:
                    images = images.float()
                optimizer.zero_grad()
                outputs = model(images)
                loss = criterion(outputs, labels)
                loss.backward()
                optimizer.step()
                train_loss += loss.item()
                _, predicted = outputs.max(1)
                train_total += labels.size(0)
                train_correct += predicted.eq(labels).sum().item()

            train_acc = 100.0 * train_correct / train_total if train_total > 0 else 0.0
            train_epoch_loss = train_loss / len(train_loader) if len(train_loader) > 0 else 0.0

            val_acc = 0.0
            val_loss = 0.0
            if test_loader:
                model.eval()
                val_correct = 0
                val_total = 0
                with torch.no_grad():
                    for images, labels in test_loader:
                        if images.numel() == 0:
                            continue
                        images, labels = images.to(device), labels.to(device)
                        if images.dtype != torch.float32:
                            images = images.float()
                        outputs = model(images)
                        loss = criterion(outputs, labels)
                        val_loss += loss.item()
                        _, predicted = outputs.max(1)
                        val_total += labels.size(0)
                        val_correct += predicted.eq(labels).sum().item()
                val_acc = 100.0 * val_correct / val_total if val_total > 0 else 0.0
                val_epoch_loss = val_loss / len(test_loader) if len(test_loader) > 0 else 0.0
            else:
                val_epoch_loss = train_epoch_loss

            history['train_loss'].append(train_epoch_loss)
            history['train_acc'].append(train_acc)
            history['val_loss'].append(val_epoch_loss)
            history['val_acc'].append(val_acc)

            if val_acc > history['best_val_acc']:
                history['best_val_acc'] = val_acc
            if val_epoch_loss < history['best_val_loss']:
                history['best_val_loss'] = val_epoch_loss

            print(f"Epoch {epoch+1}: Train Loss: {train_epoch_loss:.4f}, Acc: {train_acc:.2f}%, Val Loss: {val_epoch_loss:.4f}, Acc: {val_acc:.2f}%")

        try:
            os.makedirs(os.path.dirname(args.trained_model), exist_ok=True)
            os.makedirs(os.path.dirname(args.training_history), exist_ok=True)
            torch.save({
                'model_state_dict': model.state_dict(),
                'optimizer_state_dict': optimizer.state_dict(),
                'history': history,
            }, args.trained_model)
            with open(args.training_history, 'w') as f:
                json.dump(history, f, indent=2)
            print("Training completed successfully")
        except Exception as e:
            print("ERROR saving results: " + str(e))
            sys.exit(1)
    args:
      - --data_path
      - {inputPath: data_path}
      - --model
      - {inputPath: model}
      - --config
      - {inputValue: config}
      - --trained_model
      - {outputPath: trained_model}
      - --training_history
      - {outputPath: training_history}
