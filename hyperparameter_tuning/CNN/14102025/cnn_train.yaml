name: CNN Train Model
description: Trains CNN model using provided data and configuration
inputs:
  - name: data_path
    type: Dataset
  - name: model
    type: Model
  - name: config
    type: String
outputs:
  - name: trained_model
    type: Model
  - name: training_history
    type: String

implementation:
  container:
    image: gurpreetgandhi/nesy-factory:v19
    command:
      - sh
      - -c
      - |
        set -e
        echo "Installing required dependencies..."
        pip install --quiet torchvision pillow --root-user-action=ignore 2>/dev/null || true
        echo "Starting training..."
        python3 -u -c "
        import torch, argparse, pickle, os, json, torch.nn as nn, torch.optim as optim
        
        parser = argparse.ArgumentParser()
        parser.add_argument('--data_path', type=str, required=True)
        parser.add_argument('--model', type=str, required=True)
        parser.add_argument('--config', type=str, required=True)
        parser.add_argument('--trained_model', type=str, required=True)
        parser.add_argument('--training_history', type=str, required=True)
        args = parser.parse_args()

        class DataWrapper:
            def __init__(self, data_dict=None):
                if data_dict:
                    self.__dict__.update(data_dict)

        class LabeledDataset:
            def __init__(self, dataset=None, label_mapping=None):
                self.dataset = dataset or []
                self.label_mapping = label_mapping or {}
                
            def __len__(self):
                return len(self.dataset) if hasattr(self.dataset, '__len__') else 100
                    
            def __getitem__(self, idx):
                try:
                    if hasattr(self.dataset, '__getitem__'):
                        item = self.dataset[idx]
                        return item if isinstance(item, tuple) else (item, 0)
                except:
                    pass
                return torch.randn(3, 224, 224), 0

        print('Loading data...')
        with open(args.data_path, 'rb') as f:
            processed_data = pickle.load(f)

        print('Data loaded successfully')
        print(f'Train loader batches: {len(processed_data.train_loader)}')
        print(f'Test loader batches: {len(processed_data.test_loader)}')

        config = json.loads(args.config)
        training_config = config.get('training', {})
        model_config = config.get('model', {})
        
        from nesy_factory.CNNs.factory import CNNFactory
        model = CNNFactory.create_model(model_config.get('architecture', 'resnet'), model_config)
        model.load_state_dict(torch.load(args.model, map_location=torch.device('cpu')))

        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        model = model.to(device)
        
        epochs = training_config.get('epochs', 5)
        learning_rate = training_config.get('optimizer', {}).get('learning_rate', 0.001)
        
        optimizer = optim.AdamW(model.parameters(), lr=learning_rate)
        criterion = nn.CrossEntropyLoss()

        train_loader = processed_data.train_loader
        test_loader = processed_data.test_loader

        training_history = []
        best_val_acc = 0.0

        for epoch in range(epochs):
            model.train()
            train_loss = 0.0
            train_correct = 0
            train_total = 0
            
            for data, target in train_loader:
                data, target = data.to(device), target.to(device)
                
                optimizer.zero_grad()
                output = model(data)
                loss = criterion(output, target)
                loss.backward()
                optimizer.step()
                
                train_loss += loss.item()
                _, predicted = output.max(1)
                train_total += target.size(0)
                train_correct += predicted.eq(target).sum().item()
            
            train_acc = 100.0 * train_correct / train_total
            
            val_acc = 0.0
            if test_loader:
                model.eval()
                val_correct = 0
                val_total = 0
                
                with torch.no_grad():
                    for data, target in test_loader:
                        data, target = data.to(device), target.to(device)
                        output = model(data)
                        _, predicted = output.max(1)
                        val_total += target.size(0)
                        val_correct += predicted.eq(target).sum().item()
                
                val_acc = 100.0 * val_correct / val_total
            
            epoch_info = {
                'epoch': epoch + 1,
                'train_loss': train_loss / len(train_loader),
                'train_accuracy': train_acc,
                'val_accuracy': val_acc
            }
            training_history.append(epoch_info)
            
            print(f'Epoch {epoch+1}/{epochs}: Train Acc: {train_acc:.2f}% | Val Acc: {val_acc:.2f}%')

        os.makedirs(os.path.dirname(args.trained_model), exist_ok=True)
        os.makedirs(os.path.dirname(args.training_history), exist_ok=True)
        
        torch.save(model.state_dict(), args.trained_model)
        with open(args.training_history, 'w') as f:
            json.dump(training_history, f, indent=2)

        print('Training completed successfully')
        " -- --data_path "$1" --model "$2" --config "$3" --trained_model "$4" --training_history "$5"
    args:
      - {inputPath: data_path}
      - {inputPath: model}
      - {inputValue: config}
      - {outputPath: trained_model}
      - {outputPath: training_history}
