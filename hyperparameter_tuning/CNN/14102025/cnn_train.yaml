name: svt-cnn-train-model
description: Trains an SVT CNN model with safe dependency handling and robust logging.

inputs:
  - {name: data_path, type: String, description: "Path to training dataset"}
  - {name: output_path, type: String, description: "Path to save model outputs"}
  - {name: epochs, type: Integer, default: 5, description: "Number of training epochs"}
  - {name: lr, type: Float, default: 0.001, description: "Learning rate"}

implementation:
  container:
    image: pytorch/pytorch:2.2.0-cuda12.1-cudnn8-runtime
    command:
      - bash
      - -ec
      - |
        echo "==== Starting Training ===="
        pip install --quiet numpy pandas matplotlib tqdm scikit-learn || { echo "Dependency install failed"; exit 1; }

        python3 - <<'PYCODE'
        import os, sys, torch, argparse, torch.nn as nn, torch.optim as optim
        from torch.utils.data import DataLoader, TensorDataset
        import numpy as np
        from tqdm import tqdm

        parser = argparse.ArgumentParser()
        parser.add_argument("--data_path", type=str, required=True)
        parser.add_argument("--output_path", type=str, required=True)
        parser.add_argument("--epochs", type=int, default=5)
        parser.add_argument("--lr", type=float, default=0.001)
        args = parser.parse_args([])

        print("\n" + "=" * 60)
        print("Running SVT CNN Training")
        print("data_path:", args.data_path)
        print("output_path:", args.output_path)
        print("epochs:", args.epochs)
        print("lr:", args.lr)
        print("=" * 60)

        class SimpleCNN(nn.Module):
            def __init__(self):
                super().__init__()
                self.conv1 = nn.Conv2d(1, 8, 3, padding=1)
                self.pool = nn.MaxPool2d(2, 2)
                self.conv2 = nn.Conv2d(8, 16, 3, padding=1)
                self.fc1 = nn.Linear(16 * 7 * 7, 10)
            def forward(self, x):
                x = self.pool(torch.relu(self.conv1(x)))
                x = self.pool(torch.relu(self.conv2(x)))
                x = x.view(-1, 16 * 7 * 7)
                return self.fc1(x)

        model = SimpleCNN()
        criterion = nn.CrossEntropyLoss()
        optimizer = optim.Adam(model.parameters(), lr=args.lr)

        X = torch.randn(200, 1, 28, 28)
        y = torch.randint(0, 10, (200,))
        dataset = TensorDataset(X, y)
        loader = DataLoader(dataset, batch_size=16, shuffle=True)

        for epoch in range(args.epochs):
            running_loss = 0.0
            for inputs, labels in tqdm(loader, desc=f"Epoch {epoch+1}/{args.epochs}"):
                optimizer.zero_grad()
                outputs = model(inputs)
                loss = criterion(outputs, labels)
                loss.backward()
                optimizer.step()
                running_loss += loss.item()
            print(f"Epoch {epoch+1} - Loss: {running_loss/len(loader):.4f}")

        os.makedirs(args.output_path, exist_ok=True)
        model_file = os.path.join(args.output_path, "svt_cnn_model.pt")
        torch.save(model.state_dict(), model_file)
        print("Model saved to:", model_file)
        print("\n" + "=" * 50)
        PYCODE

        echo "==== Training Complete ===="
