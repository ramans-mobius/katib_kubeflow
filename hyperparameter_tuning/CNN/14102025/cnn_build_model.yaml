name: dataset CNN Build Model
description: Instantiates a CNN model using CNNFactory with configuration
inputs:
  - name: config_str
    type: String
    description: Model configuration as JSON string
  - name: model_name
    type: String
    description: CNN model architecture name
outputs:
  - name: model_out
    type: Model
  - name: config_updated
    type: String
  - name: model_info_out
    type: String

implementation:
  container:
    image: gurpreetgandhi/nesy-factory:v19
    command:
      - sh
      - -c
      - |
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import torch, argparse, json, os, pickle

        parser = argparse.ArgumentParser()
        parser.add_argument('--config_str', type=str, required=True)
        parser.add_argument('--model_name', type=str, required=True)
        parser.add_argument('--model_out', type=str, required=True)
        parser.add_argument('--config_updated', type=str, required=True)
        parser.add_argument('--model_info_out', type=str, required=True)
        args = parser.parse_args()

        # Parse configuration
        config = json.loads(args.config_str)
        model_config = config.get('model', {})
        model_config['architecture'] = args.model_name
        
        # Set default values
        defaults = {
            'output_dim': 10,
            'input_channels': 3,
            'input_size': [224, 224],
            'pretrained': True
        }
        
        for param, default_value in defaults.items():
            if param not in model_config:
                print(f"{param} not found, using default: {default_value}")
                model_config[param] = default_value

        try:
            from nesy_factory.CNNs.factory import CNNFactory
            model = CNNFactory.create_model(args.model_name, model_config)
            print(f"Model created with {model.get_num_parameters():,} parameters")
        except Exception as e:
            print(f"Failed to create model: {e}")
            exit(1)

        # Get model info
        model_info = model.get_model_info()
        
        # Combine config and model_info
        combined_info = {
            **model_info,
            **config,
            'model_name': args.model_name
        }

        # Create output directories
        os.makedirs(os.path.dirname(args.model_out), exist_ok=True)
        os.makedirs(os.path.dirname(args.config_updated), exist_ok=True)
        os.makedirs(os.path.dirname(args.model_info_out), exist_ok=True)

        # Save model
        torch.save(model.state_dict(), args.model_out)

        # Save updated config
        config['model'] = model_config
        with open(args.config_updated, 'w') as f:
            json.dump(config, f, indent=2)
            
        # Save combined info
        with open(args.model_info_out, 'w') as f:
            json.dump(combined_info, f, indent=2)

        print(f"Model saved to {args.model_out}")
        print(f"Updated config saved to {args.config_updated}")
        print(f"Combined model info saved to {args.model_info_out}")

    args:
      - --model_name
      - {inputValue: model_name}
      - --config_str
      - {inputValue: config_str}
      - --model_out
      - {outputPath: model_out}
      - --config_updated
      - {outputPath: config_updated}
      - --model_info_out
      - {outputPath: model_info_out}
