name: 2 Create CNN Model Archive Files
description: Creates .mar file and config.properties using input values
inputs:
  - name: model_weights_url
    type: String
    description: "URL to model weights file"
  - name: model_config_json
    type: String  
    description: "Model configuration as JSON string"
  - name: class_labels_json
    type: String
    description: "Class labels as JSON string"
  - name: handler_cdn_url
    type: String
    description: "CDN URL to the handler.py file"
  - name: model_name
    type: String
    description: "Name for the model archive"
  - name: model_version
    type: String
    description: "Model version"
    default: "1.0"
outputs:
  - name: mar_file
    type: Dataset
    description: "Generated .mar model archive"
  - name: config_properties
    type: Dataset
    description: "Generated config.properties file"
implementation:
  container:
    image: python:3.8-slim
    command:
      - sh
      - -ec
      - |
        apt-get update > /dev/null && apt-get install -y curl wget > /dev/null
        pip install torch torchvision Pillow pyyaml requests > /dev/null
        pip install torchserve torch-model-archiver > /dev/null 2>&1 || \
        (echo "Installing torch-model-archiver from GitHub..." && \
         pip install https://github.com/pytorch/serve/archive/refs/heads/master.zip#subdirectory=model-archiver > /dev/null)
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import subprocess
        import os
        import shutil
        import json
        import yaml
        import requests
        from pathlib import Path

        parser = argparse.ArgumentParser(description="Create CNN model archive files.")
        parser.add_argument('--model_weights_url', type=str, required=True)
        parser.add_argument('--model_config_json', type=str, required=True)
        parser.add_argument('--class_labels_json', type=str, required=True)
        parser.add_argument('--handler_cdn_url', type=str, required=True)
        parser.add_argument('--model_name', type=str, required=True)
        parser.add_argument('--model_version', type=str, default='1.0')
        parser.add_argument('--mar_file', type=str, required=True)
        parser.add_argument('--config_properties', type=str, required=True)
        args = parser.parse_args()

        print("MAR_CREATION: Starting MAR creation process")
        print(f"MAR_CREATION: Model name: {args.model_name}")
        print(f"MAR_CREATION: Model version: {args.model_version}")
        print(f"MAR_CREATION: Handler URL: {args.handler_cdn_url}")
        print(f"MAR_CREATION: Model weights URL: {args.model_weights_url}")

        work_dir = Path("/tmp/model_build")
        work_dir.mkdir(exist_ok=True)
        print(f"MAR_CREATION: Working directory: {work_dir}")

        print("MAR_CREATION: Downloading model weights")
        response = requests.get(args.model_weights_url)
        print(f"MAR_CREATION: Weights download status: {response.status_code}")
        response.raise_for_status()
        with open(work_dir / "model_weights.pth", 'wb') as f:
            f.write(response.content)
        print(f"MAR_CREATION: Weights saved, size: {os.path.getsize(work_dir / 'model_weights.pth')} bytes")

        print("MAR_CREATION: Parsing model config JSON")
        model_config_data = json.loads(args.model_config_json)
        print(f"MAR_CREATION: Model config keys: {model_config_data.keys()}")
        with open(work_dir / "model_config.json", 'w') as f:
            json.dump(model_config_data, f)

        print("MAR_CREATION: Parsing class labels JSON")
        class_labels_data = json.loads(args.class_labels_json)
        print(f"MAR_CREATION: Class labels count: {len(class_labels_data)}")
        with open(work_dir / "class_labels.json", 'w') as f:
            json.dump(class_labels_data, f)

        print("MAR_CREATION: Downloading handler")
        response = requests.get(args.handler_cdn_url)
        print(f"MAR_CREATION: Handler download status: {response.status_code}")
        response.raise_for_status()
        with open(work_dir / "cnn_handler.py", 'w') as f:
            f.write(response.text)
        print(f"MAR_CREATION: Handler saved, size: {os.path.getsize(work_dir / 'cnn_handler.py')} bytes")

        print("MAR_CREATION: Converting config to YAML")
        model_info = model_config_data.get('model_info', {})
        print(f"MAR_CREATION: Model info keys: {model_info.keys()}")
        yaml_config = {
            'architecture': model_info.get('architecture', 'resnet'),
            'variant': model_info.get('variant', 'resnet50'),
            'input_channels': model_info.get('input_channels', 3),
            'input_size': model_info.get('input_size', [224, 224]),
            'output_dim': model_info.get('output_dim') or model_info.get('num_classes', 1000),
            'pretrained': model_info.get('pretrained', False),
            'task_type': 'classification'
        }
        print(f"MAR_CREATION: YAML config: {yaml_config}")
        with open(work_dir / "model_config.yaml", 'w') as f:
            yaml.dump(yaml_config, f)

        print("MAR_CREATION: Creating preprocess config")
        import pickle
        preprocess_config = {
            'input_size': [224, 224],
            'normalize_mean': [0.485, 0.456, 0.406],
            'normalize_std': [0.229, 0.224, 0.225],
            'task_type': 'classification'
        }
        with open(work_dir / "preprocess_config.pkl", 'wb') as f:
            pickle.dump(preprocess_config, f)

        print("MAR_CREATION: Creating .mar file")
        mar_command = [
            "torch-model-archiver",
            "--model-name", args.model_name,
            "--version", args.model_version,
            "--serialized-file", str(work_dir / "model_weights.pth"),
            "--handler", str(work_dir / "cnn_handler.py"),
            "--extra-files", f"{work_dir / 'model_config.yaml'},{work_dir / 'class_labels.json'},{work_dir / 'preprocess_config.pkl'}",
            "--export-path", str(work_dir),
            "--force"
        ]
        print(f"MAR_CREATION: Running command: {' '.join(mar_command)}")
        subprocess.run(mar_command, check=True)

        mar_path = work_dir / f"{args.model_name}.mar"
        print(f"MAR_CREATION: MAR file created, size: {os.path.getsize(mar_path)} bytes")

        print("MAR_CREATION: Creating config.properties")
        config_lines = [
            "inference_address=http://0.0.0.0:8085",
            "management_address=http://0.0.0.0:8083", 
            "metrics_address=http://0.0.0.0:8082",
            "grpc_inference_port=7070",
            "grpc_management_port=7071",
            "max_request_size=1073741824",
            "max_response_size=1073741824",
            "install_py_dep_per_model=true",
            "NUM_WORKERS=1",
            "number_of_gpu=1",
            "number_of_netty_threads=32",
            "job_queue_size=1000",
            "model_store=/mnt/models/model-store",
            f'model_snapshot={{"name": "startup.cfg", "modelCount": 1, "models": {{"{args.model_name}": {{"{args.model_version}": {{"defaultVersion": true, "marName": "{args.model_name}.mar", "minWorkers": 1, "maxWorkers": 4, "batchSize": 8, "maxBatchDelay": 100, "responseTimeout": 120}}}}}}}}'
        ]
        config_content = "\n".join(config_lines)
        with open(work_dir / "config.properties", 'w') as f:
            f.write(config_content)

        print("MAR_CREATION: Copying output files")
        shutil.copy2(mar_path, args.mar_file)
        shutil.copy2(work_dir / "config.properties", args.config_properties)

        print(f"MAR_CREATION: Output MAR file: {args.mar_file}")
        print(f"MAR_CREATION: Output config file: {args.config_properties}")
        print("MAR_CREATION: Process completed successfully")
    args:
      - --model_weights_url
      - {inputValue: model_weights_url}
      - --model_config_json
      - {inputValue: model_config_json}
      - --class_labels_json
      - {inputValue: class_labels_json}
      - --handler_cdn_url
      - {inputValue: handler_cdn_url}
      - --model_name
      - {inputValue: model_name}
      - --model_version
      - {inputValue: model_version}
      - --mar_file
      - {outputPath: mar_file}
      - --config_properties
      - {outputPath: config_properties}
