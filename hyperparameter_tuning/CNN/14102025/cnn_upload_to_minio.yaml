name: CNN to MinIO
description: Package CNN model for KServe deployment and upload to MinIO
inputs:
  - {name: trained_model, type: Model}
  - {name: config, type: String} 
  - {name: data_path, type: Dataset}
  - {name: bearer_token, type: String}
  - {name: model_name, type: String}
  - {name: bucket, type: String, default: "ml-models"}
  - {name: app_name, type: String, default: "cnn-app"}
  - {name: version, type: String, default: ""}
outputs:
  - {name: model_uri, type: String}
  - {name: manifest_json, type: Data}

implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -c
    - |
      pip install torch torchvision pillow minio
      python3 -c "
      import sys, os, json, uuid, pickle, torch
      from minio import Minio
      from minio.error import S3Error
      
      # Parse arguments
      trained_model = sys.argv[1]
      config_path = sys.argv[2] 
      data_path = sys.argv[3]
      bearer_token = sys.argv[4]
      model_name = sys.argv[5]
      bucket = sys.argv[6]
      app_name = sys.argv[7]
      version = sys.argv[8] or 'v1'
      output_uri = sys.argv[9]
      output_manifest = sys.argv[10]
      
      # MinIO client setup
      client = Minio(
          'minio-service.kubeflow.svc.cluster.local:9000',
          access_key='minio',
          secret_key='K7712XV0U4HRXJOCL8JJFPBVUNFNZL',
          secure=False
      )
      
      # Create package
      stage_dir = '/tmp/cnn_package'
      os.makedirs(stage_dir, exist_ok=True)
      
      # Copy model files
      import shutil
      shutil.copy(trained_model, f'{stage_dir}/model.pth')
      shutil.copy(config_path, f'{stage_dir}/config.json')
      
      # Create runtime
      with open(f'{stage_dir}/runtime.py', 'w') as f:
          f.write('''
from mlserver import MLModel
import torch, json, torchvision.transforms as transforms
from PIL import Image

class CNNRuntime(MLModel):
    async def load(self):
        self.model = torch.load('model.pth', map_location='cpu')
        self.model.eval()
        self.transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ])
        return True
        
    async def predict(self, request):
        return {'status': 'CNN model ready'}
''')
      
      # Create manifest
      manifest = {
          'files': ['model.pth', 'config.json', 'runtime.py'],
          'model_name': model_name,
          'timestamp': str(uuid.uuid4())[:8]
      }
      
      with open(output_manifest, 'w') as f:
          json.dump(manifest, f)
      
      # Upload to MinIO
      s3_path = f'{app_name}/{model_name}/{version}/'
      
      for file in os.listdir(stage_dir):
          client.fput_object(
              bucket, f'{s3_path}{file}', f'{stage_dir}/{file}'
          )
      
      # Write output URI
      with open(output_uri, 'w') as f:
          f.write(f's3://{bucket}/{s3_path}')
      
      print('CNN to MinIO completed successfully')
      "
      -- {inputPath: trained_model}
      -- {inputPath: config}
      -- {inputPath: data_path}
      -- {inputPath: bearer_token}
      -- {inputValue: model_name}
      -- {inputValue: bucket}
      -- {inputValue: app_name}
      -- {inputValue: version}
      -- {outputPath: model_uri}
      -- {outputPath: manifest_json}
