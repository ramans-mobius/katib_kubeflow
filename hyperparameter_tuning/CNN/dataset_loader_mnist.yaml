name: Load and Split MNIST Dataset
description: Downloads MNIST, splits into train/val/test, and saves as JSON.
outputs:
  - {name: mnist_data, type: Dataset}
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torchvision numpy scikit-learn || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torchvision numpy scikit-learn --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import os
        import json
        import numpy as np
        from sklearn.model_selection import train_test_split
        from torchvision import datasets

        # Define output path
        output_path = "{{$.outputs.artifacts['mnist_data'].path}}"
        os.makedirs(os.path.dirname(output_path), exist_ok=True)

        # Download MNIST
        mnist_train = datasets.MNIST('/tmp/mnist', train=True, download=True)
        mnist_test = datasets.MNIST('/tmp/mnist', train=False, download=True)

        X = np.concatenate([mnist_train.data.numpy(), mnist_test.data.numpy()], axis=0).astype(np.float32) / 255.0
        y = np.concatenate([mnist_train.targets.numpy(), mnist_test.targets.numpy()], axis=0)

        # Split: 70% train, 15% val, 15% test
        X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)
        X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42, stratify=y_temp)

        data = {
            "train": {"images": X_train.tolist(), "labels": y_train.tolist()},
            "val": {"images": X_val.tolist(), "labels": y_val.tolist()},
            "test": {"images": X_test.tolist(), "labels": y_test.tolist()}
        }

        # Save as JSON
        with open(output_path, "w") as f:
            json.dump(data, f)

        print(f"[SUCCESS] MNIST dataset (train/val/test) saved to {output_path}")

