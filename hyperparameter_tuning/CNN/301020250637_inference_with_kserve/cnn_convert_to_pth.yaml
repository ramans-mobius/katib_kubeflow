name: 3 Model Weights Download and Converter
description: Downloads model weights from CDN URL and converts/saves as .pth file
inputs:
  - name: model_weights_url
    type: String
    description: URL to fetch the model weights file from
  - name: output_filename
    type: String
    description: Name for the output .pth file (without extension)
    default: model_weights
outputs:
  - name: model_weights_file
    type: String
    description: Downloaded model weights in .pth format
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        set -e
        python3 -m pip install --quiet requests torch numpy
        python3 -c "
        import sys, os, requests, json, pickle, urllib.parse, io
        import torch
        import time
        
        print('Starting model weights download and conversion...')
        print('Number of arguments:', len(sys.argv))
        print('Arguments:', sys.argv)
        
        # Get args directly from command line
        model_weights_url = sys.argv[1]
        output_filename = sys.argv[2]
        output_dir = sys.argv[3]  # This is the directory path
        
        print(f'model_weights_url: {model_weights_url}')
        print(f'output_filename: {output_filename}')
        print(f'output_dir: {output_dir}')
        
        def download_and_convert_weights(url, output_dir, filename):
            start_time = time.time()
            
            # Decode URL
            decoded_url = urllib.parse.unquote(url)
            print(f'Fetching model weights from: {decoded_url}')
            
            # Download the file with progress tracking
            print('Starting download...')
            download_start = time.time()
            r = requests.get(decoded_url, timeout=600)  # 10 minute timeout
            r.raise_for_status()
            download_time = time.time() - download_start
            print(f'Download completed in {download_time:.2f} seconds')
            print(f'Content length: {len(r.content)} bytes ({len(r.content)/1024/1024:.2f} MB)')
            
            # Ensure output directory exists
            os.makedirs(output_dir, exist_ok=True)
            
            # Get the file extension from URL to determine format
            file_extension = os.path.splitext(decoded_url.split('/')[-1])[1].lower()
            print(f'Detected file extension: {file_extension}')
            
            # Save to the correct output directory
            final_output = os.path.join(output_dir, f'{filename}.pth')
            
            # Process based on file type
            if file_extension in ['.pth', '.pt', '.pth.tar']:
                print('File is already in PyTorch format, saving directly...')
                with open(final_output, 'wb') as f:
                    f.write(r.content)
                print(f'Model weights saved as: {final_output}')
                
            elif file_extension in ['.pkl', '.pickle']:
                print('Converting pickle format to PyTorch...')
                import pickle
                pickle_start = time.time()
                model_data = pickle.loads(r.content)
                pickle_time = time.time() - pickle_start
                print(f'Pickle load completed in {pickle_time:.2f} seconds')
                
                if isinstance(model_data, dict):
                    print('Detected state dictionary format')
                    torch.save(model_data, final_output)
                else:
                    print('Detected model object format')
                    torch.save({'model_state_dict': model_data}, final_output)
                print(f'Pickle model converted and saved as: {final_output}')
                
            else:
                print(f'Unknown format {file_extension}, attempting auto-detection...')
                
                # Try common formats
                try:
                    print('Trying PyTorch format...')
                    buffer = io.BytesIO(r.content)
                    model_data = torch.load(buffer)
                    torch.save(model_data, final_output)
                    print(f'Auto-detected PyTorch format, saved as: {final_output}')
                except:
                    try:
                        print('Trying pickle format...')
                        import pickle
                        model_data = pickle.loads(r.content)
                        torch.save({'model_state_dict': model_data}, final_output)
                        print(f'Auto-detected pickle format, saved as: {final_output}')
                    except:
                        print('Falling back to raw content saving...')
                        torch.save({'raw_weights': r.content}, final_output)
                        print(f'Unknown format, saved raw content as: {final_output}')
            
            total_time = time.time() - start_time
            print(f'Total processing time: {total_time:.2f} seconds')
            return final_output

        # Download and convert model weights - pass output_dir as directory
        pth_file = download_and_convert_weights(model_weights_url, output_dir, output_filename)
        
        # Verify the file was created in the correct location
        if os.path.exists(pth_file):
            file_size = os.path.getsize(pth_file)
            print(f'Model weights successfully converted to: {pth_file} ({file_size} bytes)')
            
            # List the directory contents for verification
            print(f'Directory contents of {output_dir}:')
            for item in os.listdir(output_dir):
                item_path = os.path.join(output_dir, item)
                if os.path.isfile(item_path):
                    size = os.path.getsize(item_path)
                    print(f'  {item} ({size} bytes)')
        else:
            raise Exception('Failed to create .pth file')
            
        print('Model weights download and conversion completed successfully')
        " "$0" "$1" "$2" "$3"
    args:
      - {inputValue: model_weights_url}
      - {inputValue: output_filename}
      - {outputPath: model_weights_file}
