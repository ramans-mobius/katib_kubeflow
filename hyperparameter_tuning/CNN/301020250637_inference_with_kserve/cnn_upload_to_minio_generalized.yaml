name: 2 Generalized Upload to MinIO for CNN
description: Upload config.properties and cnn-classifier.mar files to MinIO bucket
inputs:
- {name: Config File, type: String}
- {name: Model File, type: String}  
- {name: MinIO bucket name, type: String, default: "models"}
- {name: Application name, type: String, default: "cnn-classifier"}
- {name: MinIO username, type: String}
- {name: MinIO password, type: String}
outputs:
- {name: MinIO path, type: String}
implementation:
    container:
        image: ubuntu:22.04
        command:
        - sh
        - -ex
        - -c
        - |
            echo "=== Starting MinIO Upload ==="
            echo "Input 0 (Config): $0"
            echo "Input 1 (Model): $1"
            echo "Input 2 (Bucket): $2"
            echo "Input 3 (App): $3"
            echo "Input 4 (User): $4"
            echo "Input 5 (Pass): [hidden]"
            
            apt-get -o Acquire::ForceIPv4=true update
            apt-get -o Acquire::ForceIPv4=true install -y wget python3
            wget https://dl.min.io/client/mc/release/linux-amd64/mc
            chmod +x mc
            mv mc /usr/local/bin/
            
            echo "Setting up MinIO alias..."
            mc alias set myminio http://minio-service.kubeflow.svc.cluster.local:9000 "$4" "$5"
            
            echo "Checking/creating bucket: $2"
            if ! mc ls myminio/"$2"; then
              mc mb myminio/"$2"
            fi
            
            echo "=== File Discovery ==="
            echo "Config input details:"
            ls -la "$0" 2>/dev/null || echo "Cannot list config input"
            
            echo "Model input details:"
            ls -la "$1" 2>/dev/null || echo "Cannot list model input"
            
            # Enhanced file discovery
            CONFIG_FILE=""
            if [ -f "$0/config.properties" ]; then
                CONFIG_FILE="$0/config.properties"
            elif [ -f "$0" ]; then
                CONFIG_FILE="$0"
            elif [ -d "$0" ]; then
                # If it's a directory, find any .properties file
                found_config=$(find "$0" -name "*.properties" | head -1)
                if [ -n "$found_config" ]; then
                    CONFIG_FILE="$found_config"
                fi
            fi
            
            MODEL_FILE=""
            if [ -f "$1/cnn-classifier.mar" ]; then
                MODEL_FILE="$1/cnn-classifier.mar"
            elif [ -f "$1" ]; then
                MODEL_FILE="$1"
            elif [ -d "$1" ]; then
                # If it's a directory, find any .mar file
                found_mar=$(find "$1" -name "*.mar" | head -1)
                if [ -n "$found_mar" ]; then
                    MODEL_FILE="$found_mar"
                fi
            fi
            
            echo "Final config file: $CONFIG_FILE"
            echo "Final model file: $MODEL_FILE"
            
            if [ -z "$CONFIG_FILE" ] || [ ! -f "$CONFIG_FILE" ]; then
                echo "ERROR: Config file not found!"
                exit 1
            fi
            
            if [ -z "$MODEL_FILE" ] || [ ! -f "$MODEL_FILE" ]; then
                echo "ERROR: Model file not found!"
                exit 1
            fi
            
            # === EXTRACT MODEL NAME AND UPDATE CONFIG ===
            echo "=== Updating Config with Model Name ==="
            
            # Extract model name from MAR file (without extension)
            MODEL_NAME=$(basename "$MODEL_FILE" .mar)
            echo "Detected model name: $MODEL_NAME"
            
            # Create a temporary copy of the config file
            TEMP_CONFIG="/tmp/updated_config.properties"
            cp "$CONFIG_FILE" "$TEMP_CONFIG"
            
            # Use Python for more reliable JSON manipulation
            python3 -c "
import json
import re

# Read the config file
with open('$TEMP_CONFIG', 'r') as f:
    content = f.read()

# Find and update the model_snapshot line
lines = content.split('\n')
for i, line in enumerate(lines):
    if line.startswith('model_snapshot='):
        # Extract the JSON part
        json_str = line.split('=', 1)[1]
        try:
            # Parse the JSON
            snapshot = json.loads(json_str)
            
            # Update the model name and marName
            old_model_name = list(snapshot['models'].keys())[0]
            model_data = snapshot['models'][old_model_name]
            
            # Update marName in the model data
            model_data['1.0']['marName'] = '${MODEL_NAME}.mar'
            
            # Replace the model key
            snapshot['models'] = {'${MODEL_NAME}': model_data}
            
            # Update the line
            lines[i] = 'model_snapshot=' + json.dumps(snapshot)
            print('Successfully updated config with model name: ${MODEL_NAME}')
            break
        except Exception as e:
            print(f'Error parsing JSON: {e}')
            # Fallback: simple string replacement
            lines[i] = line.replace(old_model_name, '${MODEL_NAME}')
            lines[i] = lines[i].replace('\"marName\": \"' + model_data['1.0']['marName'] + '\"', '\"marName\": \"${MODEL_NAME}.mar\"')
            print('Used fallback string replacement')

# Write the updated content back
with open('$TEMP_CONFIG', 'w') as f:
    f.write('\n'.join(lines))
"
            
            echo "Updated config content:"
            cat "$TEMP_CONFIG"
            
            echo "=== Uploading Files ==="
            # Create directory structure in MinIO
            mc mb myminio/"$2"/"$3"/config --ignore-existing || true
            mc mb myminio/"$2"/"$3"/model-store --ignore-existing || true
            
            # Upload the UPDATED config file
            mc cp "$TEMP_CONFIG" "myminio/$2/$3/config/config.properties"
            
            # Upload model file with the CORRECT name (matching the config)
            mc cp "$MODEL_FILE" "myminio/$2/$3/model-store/${MODEL_NAME}.mar"
            
            # Create output directory and file
            mkdir -p "$(dirname "$6")"
            echo "s3://$2/$3/" > "$6"
            echo "=== Upload Completed Successfully ==="
            echo "MinIO path: s3://$2/$3/"
            echo "Model name used: $MODEL_NAME"
            echo "Config updated to match model file"
        args:
        - {inputPath: Config File}
        - {inputPath: Model File}
        - {inputValue: MinIO bucket name}
        - {inputValue: Application name}
        - {inputValue: MinIO username}
        - {inputValue: MinIO password}
        - {outputPath: MinIO path}
