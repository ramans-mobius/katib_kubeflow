name: Generalized Upload to MinIO for CNN
description: Upload config.properties and model files to MinIO bucket with dynamic naming
inputs:
- {name: Config File, type: String}
- {name: Model File, type: String}  
- {name: MinIO bucket name, type: String, default: "mlmodels"}
- {name: Application name, type: String, default: "cnnresnet"}
- {name: MinIO username, type: String}
- {name: MinIO password, type: String}
outputs:
- {name: MinIO path, type: String}
implementation:
    container:
        image: ubuntu:22.04
        command:
        - sh
        - -ex
        - -c
        - |
            echo "=== Starting MinIO Upload ==="
            
            # Install dependencies
            apt-get -o Acquire::ForceIPv4=true update
            apt-get -o Acquire::ForceIPv4=true install -y wget
            wget -q https://dl.min.io/client/mc/release/linux-amd64/mc
            chmod +x mc
            mv mc /usr/local/bin/
            
            echo "Setting up MinIO alias..."
            mc alias set myminio http://minio-service.kubeflow.svc.cluster.local:9000 "$4" "$5"
            
            echo "Checking/creating bucket: $2"
            mc mb myminio/"$2" --ignore-existing || true
            
            echo "=== File Discovery ==="
            
            # Find config file
            CONFIG_FILE=""
            if [ -f "$0/config.properties" ]; then
                CONFIG_FILE="$0/config.properties"
            elif [ -f "$0" ]; then
                CONFIG_FILE="$0"
            elif [ -d "$0" ]; then
                found_config=$(find "$0" -name "*.properties" | head -1)
                [ -n "$found_config" ] && CONFIG_FILE="$found_config"
            fi
            
            # Find model file
            MODEL_FILE=""
            if [ -f "$1/cnn-classifier.mar" ]; then
                MODEL_FILE="$1/cnn-classifier.mar"
            elif [ -f "$1" ]; then
                MODEL_FILE="$1"
            elif [ -d "$1" ]; then
                found_mar=$(find "$1" -name "*.mar" | head -1)
                [ -n "$found_mar" ] && MODEL_FILE="$found_mar"
            fi
            
            echo "Final config file: $CONFIG_FILE"
            echo "Final model file: $MODEL_FILE"
            
            [ -z "$CONFIG_FILE" ] || [ ! -f "$CONFIG_FILE" ] && echo "ERROR: Config file not found!" && exit 1
            [ -z "$MODEL_FILE" ] || [ ! -f "$MODEL_FILE" ] && echo "ERROR: Model file not found!" && exit 1
            
            # === EXTRACT MODEL NAME AND UPDATE CONFIG ===
            echo "=== Updating Config with Model Name ==="
            
            # Extract model name from MAR file
            MODEL_NAME=$(basename "$MODEL_FILE" .mar)
            echo "Detected model name: $MODEL_NAME"
            
            # Create temporary config
            TEMP_CONFIG="/tmp/updated_config.properties"
            cp "$CONFIG_FILE" "$TEMP_CONFIG"
            
            # SIMPLE AND SAFE APPROACH: Use different delimiters and simpler patterns
            # Update marName field
            sed -i "s|marName\": \"[^\"]*\"|marName\": \"${MODEL_NAME}.mar\"|g" "$TEMP_CONFIG"
            
            # Find current model name and update it
            CURRENT_MODEL=$(grep -o '"models": *{"[^"]*"' "$TEMP_CONFIG" | head -1 | cut -d'"' -f4)
            if [ -n "$CURRENT_MODEL" ] && [ "$CURRENT_MODEL" != "$MODEL_NAME" ]; then
                echo "Updating model name from '$CURRENT_MODEL' to '$MODEL_NAME'"
                sed -i "s|\"$CURRENT_MODEL\"|\"$MODEL_NAME\"|g" "$TEMP_CONFIG"
            fi
            
            echo "Updated config content:"
            cat "$TEMP_CONFIG"
            
            echo "=== Uploading Files ==="
            # Create directory structure
            mc mb myminio/"$2"/"$3"/config --ignore-existing || true
            mc mb myminio/"$2"/"$3"/model-store --ignore-existing || true
            
            # Upload files
            mc cp "$TEMP_CONFIG" "myminio/$2/$3/config/config.properties"
            mc cp "$MODEL_FILE" "myminio/$2/$3/model-store/${MODEL_NAME}.mar"
            
            # Create output
            mkdir -p "$(dirname "$6")"
            echo "s3://$2/$3/" > "$6"
            
            echo "=== Upload Completed Successfully ==="
            echo "MinIO path: s3://$2/$3/"
            echo "Model name used: $MODEL_NAME"
        args:
        - {inputPath: Config File}
        - {inputPath: Model File}
        - {inputValue: MinIO bucket name}
        - {inputValue: Application name}
        - {inputValue: MinIO username}
        - {inputValue: MinIO password}
        - {outputPath: MinIO path}
