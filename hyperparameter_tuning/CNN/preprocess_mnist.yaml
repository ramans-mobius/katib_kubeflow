name: Preprocess MNIST Dataset
description: Normalizes MNIST images and creates train-validation split.
inputs:
  - {name: mnist_data, type: Dataset}
outputs:
  - {name: mnist_processed, type: Dataset}
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet numpy scikit-learn pandas || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet numpy scikit-learn pandas --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import os
        import pickle
        import numpy as np
        from sklearn.model_selection import train_test_split

        parser = argparse.ArgumentParser()
        parser.add_argument('--mnist_data', type=str, required=True)
        parser.add_argument('--mnist_processed', type=str, required=True)
        args = parser.parse_args()

        with open(args.mnist_data, "rb") as f:
            dataset = pickle.load(f)

        images = np.array(dataset["images"], dtype=np.float32) / 255.0
        labels = np.array(dataset["labels"], dtype=np.int64)

        X_train, X_val, y_train, y_val = train_test_split(
            images, labels, test_size=0.2, random_state=42
        )

        processed_data = {
            "train_images": X_train,
            "val_images": X_val,
            "train_labels": y_train,
            "val_labels": y_val
        }

        os.makedirs(os.path.dirname(args.mnist_processed), exist_ok=True)

        with open(args.mnist_processed, "wb") as f:
            pickle.dump(processed_data, f)

        print(f"[SUCCESS] Preprocessed MNIST dataset saved to {args.mnist_processed}")

    args:
      - --mnist_data
      - {inputPath: mnist_data}
      - --mnist_processed
      - {outputPath: mnist_processed}
