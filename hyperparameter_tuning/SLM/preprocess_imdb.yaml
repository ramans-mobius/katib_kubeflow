name: Preprocess IMDB Dataset
description: Tokenizes IMDB dataset and creates train-validation split for model training.
inputs:
  - {name: imdb_data, type: Dataset}
outputs:
  - {name: imdb_processed, type: Dataset}
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet transformers datasets pandas scikit-learn || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet transformers datasets pandas scikit-learn --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import os
        import pickle
        from sklearn.model_selection import train_test_split
        from transformers import AutoTokenizer

        parser = argparse.ArgumentParser()
        parser.add_argument('--imdb_data', type=str, required=True)
        parser.add_argument('--imdb_processed', type=str, required=True)
        args = parser.parse_args()

        with open(args.imdb_data, "rb") as f:
            dataset = pickle.load(f)

        print(f"[INFO] Loaded IMDB dataset with {len(dataset['text'])} samples")

        tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")

        encodings = tokenizer(
            dataset["text"], truncation=True, padding=True, max_length=256, return_tensors="pt"
        )

        X_train, X_val, y_train, y_val = train_test_split(
            encodings["input_ids"], dataset["label"], test_size=0.2, random_state=42
        )

        processed_data = {
            "train_input_ids": X_train,
            "val_input_ids": X_val,
            "train_labels": y_train,
            "val_labels": y_val
        }

        os.makedirs(os.path.dirname(args.imdb_processed), exist_ok=True)

        with open(args.imdb_processed, "wb") as f:
            pickle.dump(processed_data, f)

        print(f"[SUCCESS] Preprocessed IMDB dataset saved to {args.imdb_processed}")

    args:
      - --imdb_data
      - {inputPath: imdb_data}
      - --imdb_processed
      - {outputPath: imdb_processed}
